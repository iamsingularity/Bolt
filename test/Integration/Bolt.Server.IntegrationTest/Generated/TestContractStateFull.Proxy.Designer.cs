//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Client.Channels;
using Bolt.Server.IntegrationTest.Core;


namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractStateFullAsync : ITestContractStateFull
    {
        Task InitAsync();

        Task InitExAsync(bool failOperation);

        Task SetStateAsync(string state);

        Task<string> GetStateAsync();

        Task NextCallWillFailProxyAsync();

        Task DestroyAsync();

        Task<string> GetSessionIdAsync();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial class TestContractStateFullProxy : ContractProxy, Bolt.Server.IntegrationTest.Core.ITestContractStateFull, ITestContractStateFullAsync
    {
        public TestContractStateFullProxy(Bolt.Server.IntegrationTest.Core.TestContractStateFullProxy proxy) : base(proxy)
        {
        }

        public TestContractStateFullProxy(IChannel channel) : base(typeof(Bolt.Server.IntegrationTest.Core.ITestContractStateFull), channel)
        {
        }

        public virtual void Init()
        {
            Send(__InitAction, null, CancellationToken.None);
        }

        public virtual Task InitAsync()
        {
            return SendAsync(__InitAction, null, CancellationToken.None);
        }

        public virtual void InitEx(bool failOperation)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.AddValue("failOperation", typeof(bool), failOperation);
            Send(__InitExAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task InitExAsync(bool failOperation)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.AddValue("failOperation", typeof(bool), failOperation);
            return SendAsync(__InitExAction, bolt_Params, CancellationToken.None);
        }

        public virtual void SetState(string state)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.AddValue("state", typeof(string), state);
            Send(__SetStateAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task SetStateAsync(string state)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.AddValue("state", typeof(string), state);
            return SendAsync(__SetStateAction, bolt_Params, CancellationToken.None);
        }

        public virtual string GetState()
        {
            return Send<string>(__GetStateAction, null, CancellationToken.None);
        }

        public virtual Task<string> GetStateAsync()
        {
            return SendAsync<string>(__GetStateAction, null, CancellationToken.None);
        }

        public virtual void NextCallWillFailProxy()
        {
            Send(__NextCallWillFailProxyAction, null, CancellationToken.None);
        }

        public virtual Task NextCallWillFailProxyAsync()
        {
            return SendAsync(__NextCallWillFailProxyAction, null, CancellationToken.None);
        }

        public virtual void Destroy()
        {
            Send(__DestroyAction, null, CancellationToken.None);
        }

        public virtual Task DestroyAsync()
        {
            return SendAsync(__DestroyAction, null, CancellationToken.None);
        }

        public virtual string GetSessionId()
        {
            return Send<string>(__GetSessionIdAction, null, CancellationToken.None);
        }

        public virtual Task<string> GetSessionIdAsync()
        {
            return SendAsync<string>(__GetSessionIdAction, null, CancellationToken.None);
        }


        private static readonly MethodInfo __InitAction = typeof(ITestContractStateFull).GetMethod(nameof(ITestContractStateFull.Init));
        private static readonly MethodInfo __InitExAction = typeof(ITestContractStateFull).GetMethod(nameof(ITestContractStateFull.InitEx));
        private static readonly MethodInfo __SetStateAction = typeof(ITestContractStateFull).GetMethod(nameof(ITestContractStateFull.SetState));
        private static readonly MethodInfo __GetStateAction = typeof(ITestContractStateFull).GetMethod(nameof(ITestContractStateFull.GetState));
        private static readonly MethodInfo __NextCallWillFailProxyAction = typeof(ITestContractStateFull).GetMethod(nameof(ITestContractStateFull.NextCallWillFailProxy));
        private static readonly MethodInfo __DestroyAction = typeof(ITestContractStateFull).GetMethod(nameof(ITestContractStateFull.Destroy));
        private static readonly MethodInfo __GetSessionIdAction = typeof(ITestContractStateFull).GetMethod(nameof(ITestContractStateFull.GetSessionId));
    }
}