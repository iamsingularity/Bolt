//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bolt.Server;
using Bolt.Server.InstanceProviders;
using Bolt.Server.IntegrationTest.Core;
using Bolt.Server.IntegrationTest.Core.Parameters;


namespace Bolt.Server.IntegrationTest.Core
{
    public partial class TestContractActions : Bolt.Server.ContractActions<Bolt.Server.IntegrationTest.Core.TestContractDescriptor>
    {
        // useless comment added by user generator - 'Bolt.Server.IntegrationTest.Core.UserCodeGenerator', Context - 'generatorContext2'

        public TestContractActions()
        {
            Add(Descriptor.SimpleMethodWithSimpleArguments, TestContract_SimpleMethodWithSimpleArguments);
            Add(Descriptor.SimpleMethod, TestContract_SimpleMethod);
            Add(Descriptor.SimpleMethodExAsync, TestContract_SimpleMethodExAsync);
            Add(Descriptor.SimpleMethodWithCancellation, TestContract_SimpleMethodWithCancellation);
            Add(Descriptor.ComplexFunction, TestContract_ComplexFunction);
            Add(Descriptor.SimpleMethodWithComplexParameter, TestContractInner_SimpleMethodWithComplexParameter);
            Add(Descriptor.SimpleFunction, TestContractInner_SimpleFunction);
            Add(Descriptor.FunctionReturningHugeData, TestContractInner_FunctionReturningHugeData);
            Add(Descriptor.MethodTakingHugeData, TestContractInner_MethodTakingHugeData);
            Add(Descriptor.MethodWithNotSerializableType, TestContractInner_MethodWithNotSerializableType);
            Add(Descriptor.FunctionWithNotSerializableType, TestContractInner_FunctionWithNotSerializableType);
            Add(Descriptor.SimpleAsyncFunction, TestContractInner_SimpleAsyncFunction);
            Add(Descriptor.MethodWithManyArguments, TestContractInner_MethodWithManyArguments);
            Add(Descriptor.ThisMethodShouldBeExcluded, ExcludedContract_ThisMethodShouldBeExcluded);
        }

        protected virtual Task TestContract_SimpleMethodWithSimpleArguments(ServerActionContext context)
        {
            var parameters = context.GetRequiredParameters<Bolt.Server.IntegrationTest.Core.Parameters.SimpleMethodWithSimpleArgumentsParameters>();
            var instance = context.GetRequiredInstance<ITestContract>();
            instance.SimpleMethodWithSimpleArguments(parameters.Val);
            return Task.FromResult(true);
        }

        protected virtual Task TestContract_SimpleMethod(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContract>();
            instance.SimpleMethod();
            return Task.FromResult(true);
        }

        protected virtual async Task TestContract_SimpleMethodExAsync(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContract>();
            await instance.SimpleMethodExAsync();
        }

        protected virtual Task TestContract_SimpleMethodWithCancellation(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContract>();
            instance.SimpleMethodWithCancellation(context.RequestAborted);
            return Task.FromResult(true);
        }

        protected virtual Task TestContract_ComplexFunction(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContract>();
            context.Result = instance.ComplexFunction();
            return Task.FromResult(true);
        }

        protected virtual Task TestContractInner_SimpleMethodWithComplexParameter(ServerActionContext context)
        {
            var parameters = context.GetRequiredParameters<Bolt.Server.IntegrationTest.Core.Parameters.SimpleMethodWithComplexParameterParameters>();
            var instance = context.GetRequiredInstance<ITestContractInner>();
            instance.SimpleMethodWithComplexParameter(parameters.CompositeType);
            return Task.FromResult(true);
        }

        protected virtual Task TestContractInner_SimpleFunction(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContractInner>();
            context.Result = instance.SimpleFunction();
            return Task.FromResult(true);
        }

        protected virtual Task TestContractInner_FunctionReturningHugeData(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContractInner>();
            context.Result = instance.FunctionReturningHugeData();
            return Task.FromResult(true);
        }

        protected virtual Task TestContractInner_MethodTakingHugeData(ServerActionContext context)
        {
            var parameters = context.GetRequiredParameters<Bolt.Server.IntegrationTest.Core.Parameters.MethodTakingHugeDataParameters>();
            var instance = context.GetRequiredInstance<ITestContractInner>();
            instance.MethodTakingHugeData(parameters.Arg);
            return Task.FromResult(true);
        }

        protected virtual Task TestContractInner_MethodWithNotSerializableType(ServerActionContext context)
        {
            var parameters = context.GetRequiredParameters<Bolt.Server.IntegrationTest.Core.Parameters.MethodWithNotSerializableTypeParameters>();
            var instance = context.GetRequiredInstance<ITestContractInner>();
            instance.MethodWithNotSerializableType(parameters.Arg);
            return Task.FromResult(true);
        }

        protected virtual Task TestContractInner_FunctionWithNotSerializableType(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContractInner>();
            context.Result = instance.FunctionWithNotSerializableType();
            return Task.FromResult(true);
        }

        protected virtual async Task TestContractInner_SimpleAsyncFunction(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<ITestContractInner>();
            context.Result = await instance.SimpleAsyncFunction();
        }

        protected virtual Task TestContractInner_MethodWithManyArguments(ServerActionContext context)
        {
            var parameters = context.GetRequiredParameters<Bolt.Server.IntegrationTest.Core.Parameters.MethodWithManyArgumentsParameters>();
            var instance = context.GetRequiredInstance<ITestContractInner>();
            instance.MethodWithManyArguments(parameters.Arg1, parameters.Arg2, parameters.Time);
            return Task.FromResult(true);
        }

        protected virtual Task ExcludedContract_ThisMethodShouldBeExcluded(ServerActionContext context)
        {
            var instance = context.GetRequiredInstance<IExcludedContract>();
            instance.ThisMethodShouldBeExcluded();
            return Task.FromResult(true);
        }
    }
}

namespace Bolt.Server
{
    public static partial class TestContractActionsExtensions
    {
        public static IContractInvoker UseTestContract(this IBoltRouteHandler bolt, Bolt.Server.IntegrationTest.Core.ITestContract instance)
        {
            return bolt.UseTestContract(new StaticInstanceProvider(instance));
        }

        public static IContractInvoker UseTestContract<TImplementation>(this IBoltRouteHandler bolt) where TImplementation: Bolt.Server.IntegrationTest.Core.ITestContract
        {
            return bolt.UseTestContract(new InstanceProvider<TImplementation>());
        }

        public static IContractInvoker UseStateFullTestContract<TImplementation>(this IBoltRouteHandler bolt, ActionDescriptor initInstanceAction, ActionDescriptor releaseInstanceAction, Bolt.Server.BoltServerOptions options = null) where TImplementation: Bolt.Server.IntegrationTest.Core.ITestContract
        {
            return bolt.UseTestContract(new StateFullInstanceProvider<TImplementation>(initInstanceAction, releaseInstanceAction, options ?? bolt.Configuration.Options));
        }

        public static IContractInvoker UseTestContract(this IBoltRouteHandler bolt, IInstanceProvider instanceProvider)
        {
            return bolt.Use(new Bolt.Server.IntegrationTest.Core.TestContractActions(), instanceProvider);
        }
    }
}