//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Client.Channels;
using Bolt.Server.IntegrationTest.Core;
using Bolt.Server.IntegrationTest.Core.Parameters;


namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractStateFullAsync : ITestContractStateFull
    {
        Task InitAsync();

        Task InitExAsync(bool failOperation);

        Task SetStateAsync(string state);

        Task<string> GetStateAsync();

        Task NextCallWillFailProxyAsync();

        Task DestroyAsync();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial class TestContractStateFullProxy : ContractProxy<Bolt.Server.IntegrationTest.Core.TestContractStateFullDescriptor>, Bolt.Server.IntegrationTest.Core.ITestContractStateFull, ITestContractStateFullAsync
    {
        // useless comment added by user generator - 'Bolt.Server.IntegrationTest.Core.UserCodeGenerator', Context - ''

        public TestContractStateFullProxy(Bolt.Server.IntegrationTest.Core.TestContractStateFullProxy proxy) : base(proxy)
        {
        }

        public TestContractStateFullProxy(IChannel channel) : base(channel)
        {
        }

        public virtual void Init()
        {
            Send(Bolt.Empty.Instance, Descriptor.Init, CancellationToken.None);
        }

        public virtual Task InitAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.Init, CancellationToken.None);
        }

        public virtual void InitEx(bool failOperation)
        {
            var bolt_Params = new Bolt.Server.IntegrationTest.Core.Parameters.InitExParameters();
            bolt_Params.FailOperation = failOperation;
            Send(bolt_Params, Descriptor.InitEx, CancellationToken.None);
        }

        public virtual Task InitExAsync(bool failOperation)
        {
            var bolt_Params = new Bolt.Server.IntegrationTest.Core.Parameters.InitExParameters();
            bolt_Params.FailOperation = failOperation;
            return SendAsync(bolt_Params, Descriptor.InitEx, CancellationToken.None);
        }

        public virtual void SetState(string state)
        {
            var bolt_Params = new Bolt.Server.IntegrationTest.Core.Parameters.SetStateParameters();
            bolt_Params.State = state;
            Send(bolt_Params, Descriptor.SetState, CancellationToken.None);
        }

        public virtual Task SetStateAsync(string state)
        {
            var bolt_Params = new Bolt.Server.IntegrationTest.Core.Parameters.SetStateParameters();
            bolt_Params.State = state;
            return SendAsync(bolt_Params, Descriptor.SetState, CancellationToken.None);
        }

        public virtual string GetState()
        {
            return Send<string, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.GetState, CancellationToken.None);
        }

        public virtual Task<string> GetStateAsync()
        {
            return SendAsync<string, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.GetState, CancellationToken.None);
        }

        public virtual void NextCallWillFailProxy()
        {
            Send(Bolt.Empty.Instance, Descriptor.NextCallWillFailProxy, CancellationToken.None);
        }

        public virtual Task NextCallWillFailProxyAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.NextCallWillFailProxy, CancellationToken.None);
        }

        public virtual void Destroy()
        {
            Send(Bolt.Empty.Instance, Descriptor.Destroy, CancellationToken.None);
        }

        public virtual Task DestroyAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.Destroy, CancellationToken.None);
        }

    }
}