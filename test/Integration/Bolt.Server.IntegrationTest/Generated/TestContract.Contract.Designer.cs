//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;

using Bolt.Server.IntegrationTest.Core;
using Bolt.Server.IntegrationTest.Core.Parameters;


namespace Bolt.Server.IntegrationTest.Core.Parameters
{
    [DataContract]
    public partial class SimpleMethodWithSimpleArgumentsParameters
    {
        [DataMember(Order = 1)]
        public int Val { get; set; }
    }

    [DataContract]
    public partial class SimpleMethodWithComplexParameterParameters
    {
        [DataMember(Order = 1)]
        public Bolt.Test.Common.CompositeType CompositeType { get; set; }
    }

    [DataContract]
    public partial class MethodTakingHugeDataParameters
    {
        [DataMember(Order = 1)]
        public List<Bolt.Test.Common.CompositeType> Arg { get; set; }
    }

    [DataContract]
    public partial class MethodWithNotSerializableTypeParameters
    {
        [DataMember(Order = 1)]
        public Bolt.Test.Common.NotSerializableType Arg { get; set; }
    }

    [DataContract]
    public partial class MethodWithManyArgumentsParameters
    {
        [DataMember(Order = 1)]
        public Bolt.Test.Common.CompositeType Arg1 { get; set; }

        [DataMember(Order = 2)]
        public Bolt.Test.Common.CompositeType Arg2 { get; set; }

        [DataMember(Order = 3)]
        public DateTime Time { get; set; }
    }

}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial class TestContractDescriptor : Bolt.ContractDescriptor
    {
        public TestContractDescriptor() : base(typeof(Bolt.Server.IntegrationTest.Core.ITestContract), "TestContract")
        {
            SimpleMethodWithSimpleArguments = Add("SimpleMethodWithSimpleArguments", typeof(Bolt.Server.IntegrationTest.Core.Parameters.SimpleMethodWithSimpleArgumentsParameters), typeof(ITestContract).GetTypeInfo().GetMethod("SimpleMethodWithSimpleArguments"));
            SimpleMethod = Add("SimpleMethod", typeof(Bolt.Empty), typeof(ITestContract).GetTypeInfo().GetMethod("SimpleMethod"));
            SimpleMethodExAsync = Add("SimpleMethodExAsync", typeof(Bolt.Empty), typeof(ITestContract).GetTypeInfo().GetMethod("SimpleMethodExAsync"));
            SimpleMethodWithCancellation = Add("SimpleMethodWithCancellation", typeof(Bolt.Empty), typeof(ITestContract).GetTypeInfo().GetMethod("SimpleMethodWithCancellation"));
            ComplexFunction = Add("ComplexFunction", typeof(Bolt.Empty), typeof(ITestContract).GetTypeInfo().GetMethod("ComplexFunction"));
            SimpleMethodWithComplexParameter = Add("SimpleMethodWithComplexParameter", typeof(Bolt.Server.IntegrationTest.Core.Parameters.SimpleMethodWithComplexParameterParameters), typeof(ITestContractInner).GetTypeInfo().GetMethod("SimpleMethodWithComplexParameter"));
            SimpleFunction = Add("SimpleFunction", typeof(Bolt.Empty), typeof(ITestContractInner).GetTypeInfo().GetMethod("SimpleFunction"));
            FunctionReturningHugeData = Add("FunctionReturningHugeData", typeof(Bolt.Empty), typeof(ITestContractInner).GetTypeInfo().GetMethod("FunctionReturningHugeData"));
            MethodTakingHugeData = Add("MethodTakingHugeData", typeof(Bolt.Server.IntegrationTest.Core.Parameters.MethodTakingHugeDataParameters), typeof(ITestContractInner).GetTypeInfo().GetMethod("MethodTakingHugeData"));
            MethodWithNotSerializableType = Add("MethodWithNotSerializableType", typeof(Bolt.Server.IntegrationTest.Core.Parameters.MethodWithNotSerializableTypeParameters), typeof(ITestContractInner).GetTypeInfo().GetMethod("MethodWithNotSerializableType"));
            FunctionWithNotSerializableType = Add("FunctionWithNotSerializableType", typeof(Bolt.Empty), typeof(ITestContractInner).GetTypeInfo().GetMethod("FunctionWithNotSerializableType"));
            SimpleAsyncFunction = Add("SimpleAsyncFunction", typeof(Bolt.Empty), typeof(ITestContractInner).GetTypeInfo().GetMethod("SimpleAsyncFunction"));
            MethodWithManyArguments = Add("MethodWithManyArguments", typeof(Bolt.Server.IntegrationTest.Core.Parameters.MethodWithManyArgumentsParameters), typeof(ITestContractInner).GetTypeInfo().GetMethod("MethodWithManyArguments"));
            ThisMethodShouldBeExcluded = Add("ThisMethodShouldBeExcluded", typeof(Bolt.Empty), typeof(IExcludedContract).GetTypeInfo().GetMethod("ThisMethodShouldBeExcluded"));
        }

        public static readonly TestContractDescriptor Default = new TestContractDescriptor();

        public  Bolt.ActionDescriptor SimpleMethodWithSimpleArguments { get; private set; }

        public  Bolt.ActionDescriptor SimpleMethod { get; private set; }

        public  Bolt.ActionDescriptor SimpleMethodExAsync { get; private set; }

        public  Bolt.ActionDescriptor SimpleMethodWithCancellation { get; private set; }

        public  Bolt.ActionDescriptor ComplexFunction { get; private set; }

        public  Bolt.ActionDescriptor SimpleMethodWithComplexParameter { get; private set; }

        public  Bolt.ActionDescriptor SimpleFunction { get; private set; }

        public  Bolt.ActionDescriptor FunctionReturningHugeData { get; private set; }

        public  Bolt.ActionDescriptor MethodTakingHugeData { get; private set; }

        public  Bolt.ActionDescriptor MethodWithNotSerializableType { get; private set; }

        public  Bolt.ActionDescriptor FunctionWithNotSerializableType { get; private set; }

        public  Bolt.ActionDescriptor SimpleAsyncFunction { get; private set; }

        public  Bolt.ActionDescriptor MethodWithManyArguments { get; private set; }

        public  Bolt.ActionDescriptor ThisMethodShouldBeExcluded { get; private set; }
    }
}