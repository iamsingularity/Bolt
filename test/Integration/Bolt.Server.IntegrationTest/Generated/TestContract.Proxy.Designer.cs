//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Bolt.Client;
using Bolt.Pipeline;
using Bolt.Test.Common;

namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractInnerAsync : ITestContractInner, IExcludedContractAsync
    {
        Task SimpleMethodWithComplexParameterAsync(CompositeType compositeType);

        Task<int> SimpleFunctionAsync();

        Task<List<CompositeType>> FunctionReturningHugeDataAsync();

        Task MethodTakingHugeDataAsync(List<CompositeType> arg);

        Task MethodWithNotSerializableTypeAsync(NotSerializableType arg);

        Task<NotSerializableType> FunctionWithNotSerializableTypeAsync();

        Task MethodWithManyArgumentsAsync(CompositeType arg1, CompositeType arg2, DateTime time);
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface IExcludedContractAsync : IExcludedContract
    {
        Task ThisMethodShouldBeExcludedAsync();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractAsync : ITestContract, ITestContractInnerAsync, IExcludedContractAsync
    {
        Task SimpleMethodWithSimpleArgumentsAsync(int val);

        Task SimpleMethodAsync();

        Task MethodWithNullableArgumentsAsync(string arg);

        Task SimpleMethodWithCancellationAsync(CancellationToken cancellation);

        Task<CompositeType> ComplexFunctionAsync();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial class TestContractProxy : ProxyBase, ITestContract, ITestContractInnerAsync, IExcludedContractAsync, ITestContractAsync
    {
        public TestContractProxy(TestContractProxy proxy) : base(proxy)
        {
        }

        public TestContractProxy(IPipeline<ClientActionContext> channel) : base(typeof(ITestContract), channel)
        {
        }

        public virtual void SimpleMethodWithSimpleArguments(int val)
        {
            this.Send(__SimpleMethodWithSimpleArgumentsAction, val);
        }

        public virtual Task SimpleMethodWithSimpleArgumentsAsync(int val)
        {
            return this.SendAsync(__SimpleMethodWithSimpleArgumentsAction, val);
        }

        public virtual void SimpleMethod()
        {
            this.Send(__SimpleMethodAction);
        }

        public virtual Task SimpleMethodAsync()
        {
            return this.SendAsync(__SimpleMethodAction);
        }

        public virtual void MethodWithNullableArguments(string arg)
        {
            this.Send(__MethodWithNullableArgumentsAction, arg);
        }

        public virtual Task MethodWithNullableArgumentsAsync(string arg)
        {
            return this.SendAsync(__MethodWithNullableArgumentsAction, arg);
        }

        public virtual Task SimpleMethodExAsync()
        {
            return this.SendAsync(__SimpleMethodExAsyncAction);
        }

        public virtual void SimpleMethodWithCancellation(CancellationToken cancellation)
        {
            this.Send(__SimpleMethodWithCancellationAction, cancellation);
        }

        public virtual Task SimpleMethodWithCancellationAsync(CancellationToken cancellation)
        {
            return this.SendAsync(__SimpleMethodWithCancellationAction, cancellation);
        }

        public virtual CompositeType ComplexFunction()
        {
            return this.Send<CompositeType>(__ComplexFunctionAction);
        }

        public virtual Task<CompositeType> ComplexFunctionAsync()
        {
            return this.SendAsync<CompositeType>(__ComplexFunctionAction);
        }

        public virtual void SimpleMethodWithComplexParameter(CompositeType compositeType)
        {
            this.Send(__SimpleMethodWithComplexParameterAction, compositeType);
        }

        public virtual Task SimpleMethodWithComplexParameterAsync(CompositeType compositeType)
        {
            return this.SendAsync(__SimpleMethodWithComplexParameterAction, compositeType);
        }

        public virtual int SimpleFunction()
        {
            return this.Send<int>(__SimpleFunctionAction);
        }

        public virtual Task<int> SimpleFunctionAsync()
        {
            return this.SendAsync<int>(__SimpleFunctionAction);
        }

        public virtual List<CompositeType> FunctionReturningHugeData()
        {
            return this.Send<List<CompositeType>>(__FunctionReturningHugeDataAction);
        }

        public virtual Task<List<CompositeType>> FunctionReturningHugeDataAsync()
        {
            return this.SendAsync<List<CompositeType>>(__FunctionReturningHugeDataAction);
        }

        public virtual void MethodTakingHugeData(List<CompositeType> arg)
        {
            this.Send(__MethodTakingHugeDataAction, arg);
        }

        public virtual Task MethodTakingHugeDataAsync(List<CompositeType> arg)
        {
            return this.SendAsync(__MethodTakingHugeDataAction, arg);
        }

        public virtual void MethodWithNotSerializableType(NotSerializableType arg)
        {
            this.Send(__MethodWithNotSerializableTypeAction, arg);
        }

        public virtual Task MethodWithNotSerializableTypeAsync(NotSerializableType arg)
        {
            return this.SendAsync(__MethodWithNotSerializableTypeAction, arg);
        }

        public virtual NotSerializableType FunctionWithNotSerializableType()
        {
            return this.Send<NotSerializableType>(__FunctionWithNotSerializableTypeAction);
        }

        public virtual Task<NotSerializableType> FunctionWithNotSerializableTypeAsync()
        {
            return this.SendAsync<NotSerializableType>(__FunctionWithNotSerializableTypeAction);
        }

        public virtual Task<int> SimpleAsyncFunction()
        {
            return this.SendAsync<int>(__SimpleAsyncFunctionAction);
        }

        public virtual void MethodWithManyArguments(CompositeType arg1, CompositeType arg2, DateTime time)
        {
            this.Send(__MethodWithManyArgumentsAction, arg1, arg2, time);
        }

        public virtual Task MethodWithManyArgumentsAsync(CompositeType arg1, CompositeType arg2, DateTime time)
        {
            return this.SendAsync(__MethodWithManyArgumentsAction, arg1, arg2, time);
        }

        public virtual void ThisMethodShouldBeExcluded()
        {
            this.Send(__ThisMethodShouldBeExcludedAction);
        }

        public virtual Task ThisMethodShouldBeExcludedAsync()
        {
            return this.SendAsync(__ThisMethodShouldBeExcludedAction);
        }


        private static readonly MethodInfo __SimpleMethodWithSimpleArgumentsAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodWithSimpleArguments));
        private static readonly MethodInfo __SimpleMethodAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethod));
        private static readonly MethodInfo __MethodWithNullableArgumentsAction = typeof(ITestContract).GetMethod(nameof(ITestContract.MethodWithNullableArguments));
        private static readonly MethodInfo __SimpleMethodExAsyncAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodExAsync));
        private static readonly MethodInfo __SimpleMethodWithCancellationAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodWithCancellation));
        private static readonly MethodInfo __ComplexFunctionAction = typeof(ITestContract).GetMethod(nameof(ITestContract.ComplexFunction));
        private static readonly MethodInfo __SimpleMethodWithComplexParameterAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleMethodWithComplexParameter));
        private static readonly MethodInfo __SimpleFunctionAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleFunction));
        private static readonly MethodInfo __FunctionReturningHugeDataAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.FunctionReturningHugeData));
        private static readonly MethodInfo __MethodTakingHugeDataAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodTakingHugeData));
        private static readonly MethodInfo __MethodWithNotSerializableTypeAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodWithNotSerializableType));
        private static readonly MethodInfo __FunctionWithNotSerializableTypeAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.FunctionWithNotSerializableType));
        private static readonly MethodInfo __SimpleAsyncFunctionAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleAsyncFunction));
        private static readonly MethodInfo __MethodWithManyArgumentsAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodWithManyArguments));
        private static readonly MethodInfo __ThisMethodShouldBeExcludedAction = typeof(IExcludedContract).GetMethod(nameof(IExcludedContract.ThisMethodShouldBeExcluded));
    }
}