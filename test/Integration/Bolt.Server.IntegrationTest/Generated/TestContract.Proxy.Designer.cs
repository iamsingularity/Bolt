//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Server.IntegrationTest.Core;


namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractInnerAsync : ITestContractInner
    {
        Task SimpleMethodWithComplexParameterAsync(Bolt.Test.Common.CompositeType compositeType);

        Task MethodWithNotSerializableTypeAsync(Bolt.Test.Common.NotSerializableType arg);

        Task<Bolt.Test.Common.NotSerializableType> FunctionWithNotSerializableTypeAsync();

        int SimpleFunction();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractAsync : ITestContract, ITestContractInnerAsync
    {
        Task SimpleMethodAsync();

        void SimpleMethodEx();

        Task<Bolt.Test.Common.CompositeType> ComplexFunctionAsync();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial class TestContractProxy : Bolt.Client.ProxyBase, Bolt.Server.IntegrationTest.Core.ITestContract, ITestContractInnerAsync, ITestContractAsync
    {
        public TestContractProxy(Bolt.Server.IntegrationTest.Core.TestContractProxy proxy) : base(proxy)
        {
        }

        public TestContractProxy(Bolt.Client.Pipeline.IClientPipeline channel) : base(typeof(Bolt.Server.IntegrationTest.Core.ITestContract), channel)
        {
        }

        public virtual void SimpleMethodWithSimpleArguments(int val)
        {
            this.Send(__SimpleMethodWithSimpleArgumentsAction, val);
        }

        public virtual void SimpleMethod()
        {
            this.Send(__SimpleMethodAction);
        }

        public virtual Task SimpleMethodAsync()
        {
            return this.SendAsync(__SimpleMethodAction);
        }

        public virtual void MethodWithNullableArguments(string arg)
        {
            this.Send(__MethodWithNullableArgumentsAction, arg);
        }

        public virtual Task SimpleMethodExAsync()
        {
            return this.SendAsync(__SimpleMethodExAsyncAction);
        }

        public virtual void SimpleMethodEx()
        {
            this.Send(__SimpleMethodExAsyncAction);
        }

        public virtual void SimpleMethodWithCancellation(CancellationToken cancellation)
        {
            this.Send(__SimpleMethodWithCancellationAction, cancellation);
        }

        public virtual Bolt.Test.Common.CompositeType ComplexFunction()
        {
            return this.Send<Bolt.Test.Common.CompositeType>(__ComplexFunctionAction);
        }

        public virtual Task<Bolt.Test.Common.CompositeType> ComplexFunctionAsync()
        {
            return this.SendAsync<Bolt.Test.Common.CompositeType>(__ComplexFunctionAction);
        }

        public virtual void SimpleMethodWithComplexParameter(Bolt.Test.Common.CompositeType compositeType)
        {
            this.Send(__SimpleMethodWithComplexParameterAction, compositeType);
        }

        public virtual Task SimpleMethodWithComplexParameterAsync(Bolt.Test.Common.CompositeType compositeType)
        {
            return this.SendAsync(__SimpleMethodWithComplexParameterAction, compositeType);
        }

        public virtual int SimpleFunction2()
        {
            return this.Send<int>(__SimpleFunction2Action);
        }

        public virtual int SimpleFunctionWithCancellation(CancellationToken cancellation)
        {
            return this.Send<int>(__SimpleFunctionWithCancellationAction, cancellation);
        }

        public virtual List<Bolt.Test.Common.CompositeType> FunctionReturningHugeData()
        {
            return this.Send<List<Bolt.Test.Common.CompositeType>>(__FunctionReturningHugeDataAction);
        }

        public virtual void MethodTakingHugeData(List<Bolt.Test.Common.CompositeType> arg)
        {
            this.Send(__MethodTakingHugeDataAction, arg);
        }

        public virtual void MethodWithNotSerializableType(Bolt.Test.Common.NotSerializableType arg)
        {
            this.Send(__MethodWithNotSerializableTypeAction, arg);
        }

        public virtual Task MethodWithNotSerializableTypeAsync(Bolt.Test.Common.NotSerializableType arg)
        {
            return this.SendAsync(__MethodWithNotSerializableTypeAction, arg);
        }

        public virtual Bolt.Test.Common.NotSerializableType FunctionWithNotSerializableType()
        {
            return this.Send<Bolt.Test.Common.NotSerializableType>(__FunctionWithNotSerializableTypeAction);
        }

        public virtual Task<Bolt.Test.Common.NotSerializableType> FunctionWithNotSerializableTypeAsync()
        {
            return this.SendAsync<Bolt.Test.Common.NotSerializableType>(__FunctionWithNotSerializableTypeAction);
        }

        public virtual Task<int> SimpleFunctionAsync()
        {
            return this.SendAsync<int>(__SimpleFunctionAsyncAction);
        }

        public virtual int SimpleFunction()
        {
            return this.Send<int>(__SimpleFunctionAsyncAction);
        }

        public virtual void MethodWithManyArguments(Bolt.Test.Common.CompositeType arg1, Bolt.Test.Common.CompositeType arg2, DateTime time)
        {
            this.Send(__MethodWithManyArgumentsAction, arg1, arg2, time);
        }
        public virtual void ThisMethodShouldBeExcluded()
        {
            this.Send(__ThisMethodShouldBeExcludedAction);
        }

        private static readonly MethodInfo __SimpleMethodWithSimpleArgumentsAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodWithSimpleArguments));
        private static readonly MethodInfo __SimpleMethodAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethod));
        private static readonly MethodInfo __MethodWithNullableArgumentsAction = typeof(ITestContract).GetMethod(nameof(ITestContract.MethodWithNullableArguments));
        private static readonly MethodInfo __SimpleMethodExAsyncAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodExAsync));
        private static readonly MethodInfo __SimpleMethodWithCancellationAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodWithCancellation));
        private static readonly MethodInfo __ComplexFunctionAction = typeof(ITestContract).GetMethod(nameof(ITestContract.ComplexFunction));
        private static readonly MethodInfo __SimpleMethodWithComplexParameterAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleMethodWithComplexParameter));
        private static readonly MethodInfo __SimpleFunction2Action = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleFunction2));
        private static readonly MethodInfo __SimpleFunctionWithCancellationAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleFunctionWithCancellation));
        private static readonly MethodInfo __FunctionReturningHugeDataAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.FunctionReturningHugeData));
        private static readonly MethodInfo __MethodTakingHugeDataAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodTakingHugeData));
        private static readonly MethodInfo __MethodWithNotSerializableTypeAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodWithNotSerializableType));
        private static readonly MethodInfo __FunctionWithNotSerializableTypeAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.FunctionWithNotSerializableType));
        private static readonly MethodInfo __SimpleFunctionAsyncAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleFunctionAsync));
        private static readonly MethodInfo __MethodWithManyArgumentsAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodWithManyArguments));
        private static readonly MethodInfo __ThisMethodShouldBeExcludedAction = typeof(IExcludedContract).GetMethod(nameof(IExcludedContract.ThisMethodShouldBeExcluded));
    }
}