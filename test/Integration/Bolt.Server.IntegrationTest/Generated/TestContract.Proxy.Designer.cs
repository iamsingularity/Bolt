//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Server.IntegrationTest.Core;


namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractInnerAsync : ITestContractInner, IExcludedContractAsync
    {
        Task SimpleMethodWithComplexParameterAsync(Bolt.Test.Common.CompositeType compositeType);

        Task<int> SimpleFunctionAsync();

        Task<List<Bolt.Test.Common.CompositeType>> FunctionReturningHugeDataAsync();

        Task MethodTakingHugeDataAsync(List<Bolt.Test.Common.CompositeType> arg);

        Task MethodWithNotSerializableTypeAsync(Bolt.Test.Common.NotSerializableType arg);

        Task<Bolt.Test.Common.NotSerializableType> FunctionWithNotSerializableTypeAsync();

        Task MethodWithManyArgumentsAsync(Bolt.Test.Common.CompositeType arg1, Bolt.Test.Common.CompositeType arg2, DateTime time);
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface IExcludedContractAsync : IExcludedContract
    {
        Task ThisMethodShouldBeExcludedAsync();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial interface ITestContractAsync : ITestContract, ITestContractInnerAsync, IExcludedContractAsync
    {
        Task SimpleMethodWithSimpleArgumentsAsync(int val);

        Task SimpleMethodAsync();

        Task MethodWithNullableArgumentsAsync(string arg);

        Task SimpleMethodWithCancellationAsync(System.Threading.CancellationToken cancellation);

        Task<Bolt.Test.Common.CompositeType> ComplexFunctionAsync();
    }
}

namespace Bolt.Server.IntegrationTest.Core
{
    public partial class TestContractProxy : ContractProxy, Bolt.Server.IntegrationTest.Core.ITestContract, ITestContractInnerAsync, IExcludedContractAsync, ITestContractAsync
    {
        public TestContractProxy(Bolt.Server.IntegrationTest.Core.TestContractProxy proxy) : base(proxy)
        {
        }

        public TestContractProxy(IChannel channel) : base(typeof(Bolt.Server.IntegrationTest.Core.ITestContract), channel)
        {
        }

        public virtual void SimpleMethodWithSimpleArguments(int val)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__SimpleMethodWithSimpleArgumentsAction, "val", typeof(int), val);
            Send(__SimpleMethodWithSimpleArgumentsAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task SimpleMethodWithSimpleArgumentsAsync(int val)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__SimpleMethodWithSimpleArgumentsAction, "val", typeof(int), val);
            return SendAsync(__SimpleMethodWithSimpleArgumentsAction, bolt_Params, CancellationToken.None);
        }

        public virtual void SimpleMethod()
        {
            Send(__SimpleMethodAction, null, CancellationToken.None);
        }

        public virtual Task SimpleMethodAsync()
        {
            return SendAsync(__SimpleMethodAction, null, CancellationToken.None);
        }

        public virtual void MethodWithNullableArguments(string arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodWithNullableArgumentsAction, "arg", typeof(string), arg);
            Send(__MethodWithNullableArgumentsAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task MethodWithNullableArgumentsAsync(string arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodWithNullableArgumentsAction, "arg", typeof(string), arg);
            return SendAsync(__MethodWithNullableArgumentsAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task SimpleMethodExAsync()
        {
            return SendAsync(__SimpleMethodExAsyncAction, null, CancellationToken.None);
        }

        public virtual void SimpleMethodWithCancellation(CancellationToken cancellation)
        {
            Send(__SimpleMethodWithCancellationAction, null, cancellation);
        }

        public virtual Task SimpleMethodWithCancellationAsync(CancellationToken cancellation)
        {
            return SendAsync(__SimpleMethodWithCancellationAction, null, cancellation);
        }

        public virtual Bolt.Test.Common.CompositeType ComplexFunction()
        {
            return Send<Bolt.Test.Common.CompositeType>(__ComplexFunctionAction, null, CancellationToken.None);
        }

        public virtual Task<Bolt.Test.Common.CompositeType> ComplexFunctionAsync()
        {
            return SendAsync<Bolt.Test.Common.CompositeType>(__ComplexFunctionAction, null, CancellationToken.None);
        }

        public virtual void SimpleMethodWithComplexParameter(Bolt.Test.Common.CompositeType compositeType)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__SimpleMethodWithComplexParameterAction, "compositeType", typeof(Bolt.Test.Common.CompositeType), compositeType);
            Send(__SimpleMethodWithComplexParameterAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task SimpleMethodWithComplexParameterAsync(Bolt.Test.Common.CompositeType compositeType)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__SimpleMethodWithComplexParameterAction, "compositeType", typeof(Bolt.Test.Common.CompositeType), compositeType);
            return SendAsync(__SimpleMethodWithComplexParameterAction, bolt_Params, CancellationToken.None);
        }

        public virtual int SimpleFunction()
        {
            return Send<int>(__SimpleFunctionAction, null, CancellationToken.None);
        }

        public virtual Task<int> SimpleFunctionAsync()
        {
            return SendAsync<int>(__SimpleFunctionAction, null, CancellationToken.None);
        }

        public virtual List<Bolt.Test.Common.CompositeType> FunctionReturningHugeData()
        {
            return Send<List<Bolt.Test.Common.CompositeType>>(__FunctionReturningHugeDataAction, null, CancellationToken.None);
        }

        public virtual Task<List<Bolt.Test.Common.CompositeType>> FunctionReturningHugeDataAsync()
        {
            return SendAsync<List<Bolt.Test.Common.CompositeType>>(__FunctionReturningHugeDataAction, null, CancellationToken.None);
        }

        public virtual void MethodTakingHugeData(List<Bolt.Test.Common.CompositeType> arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodTakingHugeDataAction, "arg", typeof(List<Bolt.Test.Common.CompositeType>), arg);
            Send(__MethodTakingHugeDataAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task MethodTakingHugeDataAsync(List<Bolt.Test.Common.CompositeType> arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodTakingHugeDataAction, "arg", typeof(List<Bolt.Test.Common.CompositeType>), arg);
            return SendAsync(__MethodTakingHugeDataAction, bolt_Params, CancellationToken.None);
        }

        public virtual void MethodWithNotSerializableType(Bolt.Test.Common.NotSerializableType arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodWithNotSerializableTypeAction, "arg", typeof(Bolt.Test.Common.NotSerializableType), arg);
            Send(__MethodWithNotSerializableTypeAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task MethodWithNotSerializableTypeAsync(Bolt.Test.Common.NotSerializableType arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodWithNotSerializableTypeAction, "arg", typeof(Bolt.Test.Common.NotSerializableType), arg);
            return SendAsync(__MethodWithNotSerializableTypeAction, bolt_Params, CancellationToken.None);
        }

        public virtual Bolt.Test.Common.NotSerializableType FunctionWithNotSerializableType()
        {
            return Send<Bolt.Test.Common.NotSerializableType>(__FunctionWithNotSerializableTypeAction, null, CancellationToken.None);
        }

        public virtual Task<Bolt.Test.Common.NotSerializableType> FunctionWithNotSerializableTypeAsync()
        {
            return SendAsync<Bolt.Test.Common.NotSerializableType>(__FunctionWithNotSerializableTypeAction, null, CancellationToken.None);
        }

        public virtual Task<int> SimpleAsyncFunction()
        {
            return SendAsync<int>(__SimpleAsyncFunctionAction, null, CancellationToken.None);
        }

        public virtual void MethodWithManyArguments(Bolt.Test.Common.CompositeType arg1, Bolt.Test.Common.CompositeType arg2, DateTime time)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodWithManyArgumentsAction, "arg1", typeof(Bolt.Test.Common.CompositeType), arg1);
            bolt_Params.WriteParameter(__MethodWithManyArgumentsAction, "arg2", typeof(Bolt.Test.Common.CompositeType), arg2);
            bolt_Params.WriteParameter(__MethodWithManyArgumentsAction, "time", typeof(DateTime), time);
            Send(__MethodWithManyArgumentsAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task MethodWithManyArgumentsAsync(Bolt.Test.Common.CompositeType arg1, Bolt.Test.Common.CompositeType arg2, DateTime time)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.WriteParameter(__MethodWithManyArgumentsAction, "arg1", typeof(Bolt.Test.Common.CompositeType), arg1);
            bolt_Params.WriteParameter(__MethodWithManyArgumentsAction, "arg2", typeof(Bolt.Test.Common.CompositeType), arg2);
            bolt_Params.WriteParameter(__MethodWithManyArgumentsAction, "time", typeof(DateTime), time);
            return SendAsync(__MethodWithManyArgumentsAction, bolt_Params, CancellationToken.None);
        }

        public virtual void ThisMethodShouldBeExcluded()
        {
            Send(__ThisMethodShouldBeExcludedAction, null, CancellationToken.None);
        }

        public virtual Task ThisMethodShouldBeExcludedAsync()
        {
            return SendAsync(__ThisMethodShouldBeExcludedAction, null, CancellationToken.None);
        }


        private static readonly MethodInfo __SimpleMethodWithSimpleArgumentsAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodWithSimpleArguments));
        private static readonly MethodInfo __SimpleMethodAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethod));
        private static readonly MethodInfo __MethodWithNullableArgumentsAction = typeof(ITestContract).GetMethod(nameof(ITestContract.MethodWithNullableArguments));
        private static readonly MethodInfo __SimpleMethodExAsyncAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodExAsync));
        private static readonly MethodInfo __SimpleMethodWithCancellationAction = typeof(ITestContract).GetMethod(nameof(ITestContract.SimpleMethodWithCancellation));
        private static readonly MethodInfo __ComplexFunctionAction = typeof(ITestContract).GetMethod(nameof(ITestContract.ComplexFunction));
        private static readonly MethodInfo __SimpleMethodWithComplexParameterAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleMethodWithComplexParameter));
        private static readonly MethodInfo __SimpleFunctionAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleFunction));
        private static readonly MethodInfo __FunctionReturningHugeDataAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.FunctionReturningHugeData));
        private static readonly MethodInfo __MethodTakingHugeDataAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodTakingHugeData));
        private static readonly MethodInfo __MethodWithNotSerializableTypeAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodWithNotSerializableType));
        private static readonly MethodInfo __FunctionWithNotSerializableTypeAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.FunctionWithNotSerializableType));
        private static readonly MethodInfo __SimpleAsyncFunctionAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.SimpleAsyncFunction));
        private static readonly MethodInfo __MethodWithManyArgumentsAction = typeof(ITestContractInner).GetMethod(nameof(ITestContractInner.MethodWithManyArguments));
        private static readonly MethodInfo __ThisMethodShouldBeExcludedAction = typeof(IExcludedContract).GetMethod(nameof(IExcludedContract.ThisMethodShouldBeExcluded));
    }
}