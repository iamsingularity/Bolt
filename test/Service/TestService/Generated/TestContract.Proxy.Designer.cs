//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Client.Channels;
using TestService.Core;


namespace TestService.Core
{
    public partial class TestContractProxy : ContractProxy, TestService.Core.ITestContract
    {
        public TestContractProxy(TestService.Core.TestContractProxy proxy) : base(proxy)
        {
        }

        public TestContractProxy(IChannel channel) : base(typeof(TestService.Core.ITestContract), channel)
        {
        }

        public virtual Person UpdatePerson(Person person, CancellationToken cancellation)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return Send<Person>(__UpdatePersonAction, bolt_Params, cancellation);
        }

        public virtual Task<Person> UpdatePersonAsync(Person person, CancellationToken cancellation)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return SendAsync<Person>(__UpdatePersonAction, bolt_Params, cancellation);
        }

        public virtual Person UpdatePersonThatThrowsInvalidOperationException(Person person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return Send<Person>(__UpdatePersonThatThrowsInvalidOperationExceptionAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task<Person> UpdatePersonThatThrowsInvalidOperationExceptionAsync(Person person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return SendAsync<Person>(__UpdatePersonThatThrowsInvalidOperationExceptionAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task DoNothingAsAsync()
        {
            return SendAsync(__DoNothingAsAsyncAction, null, CancellationToken.None);
        }

        public virtual void DoNothing()
        {
            Send(__DoNothingAction, null, CancellationToken.None);
        }

        public virtual Task DoNothingAsync()
        {
            return SendAsync(__DoNothingAction, null, CancellationToken.None);
        }

        public virtual Task DoNothingWithComplexParameterAsAsync(List<Person> person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(List<Person>), person);
            return SendAsync(__DoNothingWithComplexParameterAsAsyncAction, bolt_Params, CancellationToken.None);
        }

        public virtual void DoNothingWithComplexParameter(List<Person> person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(List<Person>), person);
            Send(__DoNothingWithComplexParameterAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task DoNothingWithComplexParameterAsync(List<Person> person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(List<Person>), person);
            return SendAsync(__DoNothingWithComplexParameterAction, bolt_Params, CancellationToken.None);
        }

        public virtual int GetSimpleType(int arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("arg", typeof(int), arg);
            return Send<int>(__GetSimpleTypeAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task<int> GetSimpleTypeAsync(int arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("arg", typeof(int), arg);
            return SendAsync<int>(__GetSimpleTypeAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task GetSimpleTypeAsAsync(int arg)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("arg", typeof(int), arg);
            return SendAsync(__GetSimpleTypeAsAsyncAction, bolt_Params, CancellationToken.None);
        }

        public virtual Person GetSinglePerson(Person person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return Send<Person>(__GetSinglePersonAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task<Person> GetSinglePersonAsync(Person person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return SendAsync<Person>(__GetSinglePersonAction, bolt_Params, CancellationToken.None);
        }

        public virtual Task<Person> GetSinglePersonAsAsync(Person person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return SendAsync<Person>(__GetSinglePersonAsAsyncAction, bolt_Params, CancellationToken.None);
        }

        public virtual List<Person> GetManyPersons()
        {
            return Send<List<Person>>(__GetManyPersonsAction, null, CancellationToken.None);
        }

        public virtual Task<List<Person>> GetManyPersonsAsync()
        {
            return SendAsync<List<Person>>(__GetManyPersonsAction, null, CancellationToken.None);
        }

        public virtual Task<List<Person>> GetManyPersonsAsAsync(Person person)
        {
            var bolt_Params = Channel.Serializer.CreateSerializer();
            bolt_Params.Write("person", typeof(Person), person);
            return SendAsync<List<Person>>(__GetManyPersonsAsAsyncAction, bolt_Params, CancellationToken.None);
        }

        public virtual void Throws()
        {
            Send(__ThrowsAction, null, CancellationToken.None);
        }

        public virtual Task ThrowsAsync()
        {
            return SendAsync(__ThrowsAction, null, CancellationToken.None);
        }

        public virtual void ThrowsCustom()
        {
            Send(__ThrowsCustomAction, null, CancellationToken.None);
        }

        public virtual Task ThrowsCustomAsync()
        {
            return SendAsync(__ThrowsCustomAction, null, CancellationToken.None);
        }

        public virtual void InnerOperation()
        {
            Send(__InnerOperationAction, null, CancellationToken.None);
        }

        public virtual Task InnerOperationAsync()
        {
            return SendAsync(__InnerOperationAction, null, CancellationToken.None);
        }

        public virtual Task<string> InnerOperation3()
        {
            return SendAsync<string>(__InnerOperation3Action, null, CancellationToken.None);
        }

        public virtual Task InnerOperationExAsync()
        {
            return SendAsync(__InnerOperationExAsyncAction, null, CancellationToken.None);
        }
        public virtual void InnerOperation2()
        {
            Send(__InnerOperation2Action, null, CancellationToken.None);
        }

        public virtual Task InnerOperation2Async()
        {
            return SendAsync(__InnerOperation2Action, null, CancellationToken.None);
        }

        public virtual Task InnerOperationExAsync2()
        {
            return SendAsync(__InnerOperationExAsync2Action, null, CancellationToken.None);
        }

        private static readonly System.Reflection.MethodInfo __UpdatePersonAction = typeof(TestService.Core.ITestContract).GetMethod("UpdatePerson");
        private static readonly System.Reflection.MethodInfo __UpdatePersonThatThrowsInvalidOperationExceptionAction = typeof(TestService.Core.ITestContract).GetMethod("UpdatePersonThatThrowsInvalidOperationException");
        private static readonly System.Reflection.MethodInfo __DoNothingAsAsyncAction = typeof(TestService.Core.ITestContract).GetMethod("DoNothingAsAsync");
        private static readonly System.Reflection.MethodInfo __DoNothingAction = typeof(TestService.Core.ITestContract).GetMethod("DoNothing");
        private static readonly System.Reflection.MethodInfo __DoNothingWithComplexParameterAsAsyncAction = typeof(TestService.Core.ITestContract).GetMethod("DoNothingWithComplexParameterAsAsync");
        private static readonly System.Reflection.MethodInfo __DoNothingWithComplexParameterAction = typeof(TestService.Core.ITestContract).GetMethod("DoNothingWithComplexParameter");
        private static readonly System.Reflection.MethodInfo __GetSimpleTypeAction = typeof(TestService.Core.ITestContract).GetMethod("GetSimpleType");
        private static readonly System.Reflection.MethodInfo __GetSimpleTypeAsAsyncAction = typeof(TestService.Core.ITestContract).GetMethod("GetSimpleTypeAsAsync");
        private static readonly System.Reflection.MethodInfo __GetSinglePersonAction = typeof(TestService.Core.ITestContract).GetMethod("GetSinglePerson");
        private static readonly System.Reflection.MethodInfo __GetSinglePersonAsAsyncAction = typeof(TestService.Core.ITestContract).GetMethod("GetSinglePersonAsAsync");
        private static readonly System.Reflection.MethodInfo __GetManyPersonsAction = typeof(TestService.Core.ITestContract).GetMethod("GetManyPersons");
        private static readonly System.Reflection.MethodInfo __GetManyPersonsAsAsyncAction = typeof(TestService.Core.ITestContract).GetMethod("GetManyPersonsAsAsync");
        private static readonly System.Reflection.MethodInfo __ThrowsAction = typeof(TestService.Core.ITestContract).GetMethod("Throws");
        private static readonly System.Reflection.MethodInfo __ThrowsCustomAction = typeof(TestService.Core.ITestContract).GetMethod("ThrowsCustom");
        private static readonly System.Reflection.MethodInfo __InnerOperationAction = typeof(TestService.Core.ITestContract).GetMethod("InnerOperation");
        private static readonly System.Reflection.MethodInfo __InnerOperation3Action = typeof(TestService.Core.ITestContract).GetMethod("InnerOperation3");
        private static readonly System.Reflection.MethodInfo __InnerOperationExAsyncAction = typeof(TestService.Core.ITestContract).GetMethod("InnerOperationExAsync");
        private static readonly System.Reflection.MethodInfo __InnerOperation2Action = typeof(TestService.Core.ITestContract).GetMethod("InnerOperation2");
        private static readonly System.Reflection.MethodInfo __InnerOperationExAsync2Action = typeof(TestService.Core.ITestContract).GetMethod("InnerOperationExAsync2");
    }
}