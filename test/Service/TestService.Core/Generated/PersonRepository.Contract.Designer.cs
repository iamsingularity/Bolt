//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using TestService.Core;
using TestService.Core.Parameters;


namespace TestService.Core.Parameters
{
    [DataContract]
    public partial class UpdatePersonParameters : TestService.Core.ParametersBase
    {
        public UpdatePersonParameters() : base()
        {
        }

        public UpdatePersonParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected UpdatePersonParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public Person Person { get; set; }
    }

    [DataContract]
    public partial class UpdatePersonThatThrowsInvalidOperationExceptionParameters : TestService.Core.ParametersBase
    {
        public UpdatePersonThatThrowsInvalidOperationExceptionParameters() : base()
        {
        }

        public UpdatePersonThatThrowsInvalidOperationExceptionParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected UpdatePersonThatThrowsInvalidOperationExceptionParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public Person Person { get; set; }
    }

    [DataContract]
    public partial class DoLongRunningOperationAsyncParameters : TestService.Core.ParametersBase
    {
        public DoLongRunningOperationAsyncParameters() : base()
        {
        }

        public DoLongRunningOperationAsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected DoLongRunningOperationAsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public Person Person { get; set; }
    }

    [DataContract]
    public partial class DoLongRunningOperation2AsyncParameters : TestService.Core.ParametersBase
    {
        public DoLongRunningOperation2AsyncParameters() : base()
        {
        }

        public DoLongRunningOperation2AsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected DoLongRunningOperation2AsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

    [DataContract]
    public partial class LongRunningOperation2AsyncParameters : TestService.Core.ParametersBase
    {
        public LongRunningOperation2AsyncParameters() : base()
        {
        }

        public LongRunningOperation2AsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected LongRunningOperation2AsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

    [DataContract]
    public partial class DoNothingAsAsyncParameters : TestService.Core.ParametersBase
    {
        public DoNothingAsAsyncParameters() : base()
        {
        }

        public DoNothingAsAsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected DoNothingAsAsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

    [DataContract]
    public partial class DoNothingParameters : TestService.Core.ParametersBase
    {
        public DoNothingParameters() : base()
        {
        }

        public DoNothingParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected DoNothingParameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

    [DataContract]
    public partial class DoNothingWithComplexParameterAsAsyncParameters : TestService.Core.ParametersBase
    {
        public DoNothingWithComplexParameterAsAsyncParameters() : base()
        {
        }

        public DoNothingWithComplexParameterAsAsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected DoNothingWithComplexParameterAsAsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public List<Person> Person { get; set; }
    }

    [DataContract]
    public partial class DoNothingWithComplexParameterParameters : TestService.Core.ParametersBase
    {
        public DoNothingWithComplexParameterParameters() : base()
        {
        }

        public DoNothingWithComplexParameterParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected DoNothingWithComplexParameterParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public List<Person> Person { get; set; }
    }

    [DataContract]
    public partial class GetSimpleTypeParameters : TestService.Core.ParametersBase
    {
        public GetSimpleTypeParameters() : base()
        {
        }

        public GetSimpleTypeParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected GetSimpleTypeParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public int Arg { get; set; }
    }

    [DataContract]
    public partial class GetSimpleTypeAsAsyncParameters : TestService.Core.ParametersBase
    {
        public GetSimpleTypeAsAsyncParameters() : base()
        {
        }

        public GetSimpleTypeAsAsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected GetSimpleTypeAsAsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public int Arg { get; set; }
    }

    [DataContract]
    public partial class GetSinglePersonParameters : TestService.Core.ParametersBase
    {
        public GetSinglePersonParameters() : base()
        {
        }

        public GetSinglePersonParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected GetSinglePersonParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public Person Person { get; set; }
    }

    [DataContract]
    public partial class GetSinglePersonAsAsyncParameters : TestService.Core.ParametersBase
    {
        public GetSinglePersonAsAsyncParameters() : base()
        {
        }

        public GetSinglePersonAsAsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected GetSinglePersonAsAsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public Person Person { get; set; }
    }

    [DataContract]
    public partial class GetManyPersonsParameters : TestService.Core.ParametersBase
    {
        public GetManyPersonsParameters() : base()
        {
        }

        public GetManyPersonsParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected GetManyPersonsParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public Person Person { get; set; }
    }

    [DataContract]
    public partial class GetManyPersonsAsAsyncParameters : TestService.Core.ParametersBase
    {
        public GetManyPersonsAsAsyncParameters() : base()
        {
        }

        public GetManyPersonsAsAsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected GetManyPersonsAsAsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

        [DataMember(Order = 1)]
        public Person Person { get; set; }
    }

    [DataContract]
    public partial class InnerOperationParameters : TestService.Core.ParametersBase
    {
        public InnerOperationParameters() : base()
        {
        }

        public InnerOperationParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected InnerOperationParameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

    [DataContract]
    public partial class InnerOperationExAsyncParameters : TestService.Core.ParametersBase
    {
        public InnerOperationExAsyncParameters() : base()
        {
        }

        public InnerOperationExAsyncParameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected InnerOperationExAsyncParameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

    [DataContract]
    public partial class InnerOperation2Parameters : TestService.Core.ParametersBase
    {
        public InnerOperation2Parameters() : base()
        {
        }

        public InnerOperation2Parameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected InnerOperation2Parameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

    [DataContract]
    public partial class InnerOperationExAsync2Parameters : TestService.Core.ParametersBase
    {
        public InnerOperationExAsync2Parameters() : base()
        {
        }

        public InnerOperationExAsync2Parameters(string someeeeeee) : base(someeeeeee)
        {
        }

        protected InnerOperationExAsync2Parameters(int someeeeeee) : base(someeeeeee)
        {
        }

    }

}

namespace TestService.Core
{
    public partial class PersonRepositoryDescriptor : Bolt.ContractDescriptor
    {
        public PersonRepositoryDescriptor() : base(typeof(TestService.Core.IPersonRepository), "PersonRepository")
        {
            UpdatePerson = Add("UpdatePerson", typeof(TestService.Core.Parameters.UpdatePersonParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("UpdatePerson"));
            UpdatePersonThatThrowsInvalidOperationException = Add("UpdatePersonThatThrowsInvalidOperationException", typeof(TestService.Core.Parameters.UpdatePersonThatThrowsInvalidOperationExceptionParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("UpdatePersonThatThrowsInvalidOperationException"));
            DoLongRunningOperationAsync = Add("DoLongRunningOperationAsync", typeof(TestService.Core.Parameters.DoLongRunningOperationAsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("DoLongRunningOperationAsync"));
            DoLongRunningOperation2Async = Add("DoLongRunningOperation2Async", typeof(TestService.Core.Parameters.DoLongRunningOperation2AsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("DoLongRunningOperation2Async"));
            LongRunningOperation2Async = Add("LongRunningOperation2Async", typeof(TestService.Core.Parameters.LongRunningOperation2AsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("LongRunningOperation2Async"));
            DoNothingAsAsync = Add("DoNothingAsAsync", typeof(TestService.Core.Parameters.DoNothingAsAsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("DoNothingAsAsync"));
            DoNothing = Add("DoNothing", typeof(TestService.Core.Parameters.DoNothingParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("DoNothing"));
            DoNothingWithComplexParameterAsAsync = Add("DoNothingWithComplexParameterAsAsync", typeof(TestService.Core.Parameters.DoNothingWithComplexParameterAsAsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("DoNothingWithComplexParameterAsAsync"));
            DoNothingWithComplexParameter = Add("DoNothingWithComplexParameter", typeof(TestService.Core.Parameters.DoNothingWithComplexParameterParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("DoNothingWithComplexParameter"));
            GetSimpleType = Add("GetSimpleType", typeof(TestService.Core.Parameters.GetSimpleTypeParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("GetSimpleType"));
            GetSimpleTypeAsAsync = Add("GetSimpleTypeAsAsync", typeof(TestService.Core.Parameters.GetSimpleTypeAsAsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("GetSimpleTypeAsAsync"));
            GetSinglePerson = Add("GetSinglePerson", typeof(TestService.Core.Parameters.GetSinglePersonParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("GetSinglePerson"));
            GetSinglePersonAsAsync = Add("GetSinglePersonAsAsync", typeof(TestService.Core.Parameters.GetSinglePersonAsAsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("GetSinglePersonAsAsync"));
            GetManyPersons = Add("GetManyPersons", typeof(TestService.Core.Parameters.GetManyPersonsParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("GetManyPersons"));
            GetManyPersonsAsAsync = Add("GetManyPersonsAsAsync", typeof(TestService.Core.Parameters.GetManyPersonsAsAsyncParameters), typeof(IPersonRepository).GetTypeInfo().GetMethod("GetManyPersonsAsAsync"));
            InnerOperation = Add("InnerOperation", typeof(TestService.Core.Parameters.InnerOperationParameters), typeof(IPersonRepositoryInner).GetTypeInfo().GetMethod("InnerOperation"));
            InnerOperationExAsync = Add("InnerOperationExAsync", typeof(TestService.Core.Parameters.InnerOperationExAsyncParameters), typeof(IPersonRepositoryInner).GetTypeInfo().GetMethod("InnerOperationExAsync"));
            InnerOperation2 = Add("InnerOperation2", typeof(TestService.Core.Parameters.InnerOperation2Parameters), typeof(IPersonRepositoryInner2).GetTypeInfo().GetMethod("InnerOperation2"));
            InnerOperationExAsync2 = Add("InnerOperationExAsync2", typeof(TestService.Core.Parameters.InnerOperationExAsync2Parameters), typeof(IPersonRepositoryInner2).GetTypeInfo().GetMethod("InnerOperationExAsync2"));
        }

        public static readonly PersonRepositoryDescriptor Default = new PersonRepositoryDescriptor();

        public virtual Bolt.ActionDescriptor UpdatePerson { get; private set; }

        public virtual Bolt.ActionDescriptor UpdatePersonThatThrowsInvalidOperationException { get; private set; }

        public virtual Bolt.ActionDescriptor DoLongRunningOperationAsync { get; private set; }

        public virtual Bolt.ActionDescriptor DoLongRunningOperation2Async { get; private set; }

        public virtual Bolt.ActionDescriptor LongRunningOperation2Async { get; private set; }

        public virtual Bolt.ActionDescriptor DoNothingAsAsync { get; private set; }

        public virtual Bolt.ActionDescriptor DoNothing { get; private set; }

        public virtual Bolt.ActionDescriptor DoNothingWithComplexParameterAsAsync { get; private set; }

        public virtual Bolt.ActionDescriptor DoNothingWithComplexParameter { get; private set; }

        public virtual Bolt.ActionDescriptor GetSimpleType { get; private set; }

        public virtual Bolt.ActionDescriptor GetSimpleTypeAsAsync { get; private set; }

        public virtual Bolt.ActionDescriptor GetSinglePerson { get; private set; }

        public virtual Bolt.ActionDescriptor GetSinglePersonAsAsync { get; private set; }

        public virtual Bolt.ActionDescriptor GetManyPersons { get; private set; }

        public virtual Bolt.ActionDescriptor GetManyPersonsAsAsync { get; private set; }

        public virtual Bolt.ActionDescriptor InnerOperation { get; private set; }

        public virtual Bolt.ActionDescriptor InnerOperationExAsync { get; private set; }

        public virtual Bolt.ActionDescriptor InnerOperation2 { get; private set; }

        public virtual Bolt.ActionDescriptor InnerOperationExAsync2 { get; private set; }
    }
}

