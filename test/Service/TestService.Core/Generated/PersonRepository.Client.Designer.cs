//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TestService.Core;
using TestService.Core.Parameters;


namespace TestService.Core
{
    public partial interface IPersonRepositoryInnerAsync : IPersonRepositoryInner
    {
        Task InnerOperationAsync();
    }
}

namespace TestService.Core
{
    public partial interface IPersonRepositoryInner2Async : IPersonRepositoryInner2
    {
        Task InnerOperation2Async();
    }
}

namespace TestService.Core
{
    public partial interface IPersonRepositoryAsync : IPersonRepository, IPersonRepositoryInnerAsync, IPersonRepositoryInner2Async
    {
        Task<Person> UpdatePersonAsync(Person person, System.Threading.CancellationToken cancellation);

        Task<Person> UpdatePersonThatThrowsInvalidOperationExceptionAsync(Person person);

        Task DoNothingAsync();

        Task DoNothingWithComplexParameterAsync(List<Person> person);

        Task<int> GetSimpleTypeAsync(int arg);

        Task<Person> GetSinglePersonAsync(Person person);

        Task<List<Person>> GetManyPersonsAsync(Person person);
    }
}

namespace TestService.Core
{
    public partial class PersonRepositoryChannel : Bolt.Client.Channel, TestService.Core.IPersonRepository, IPersonRepositoryInnerAsync, IPersonRepositoryInner2Async, IPersonRepositoryAsync
    {
        private TestService.Core.PersonRepositoryDescriptor _personRepositoryDescriptor;

        public virtual TestService.Core.PersonRepositoryDescriptor PersonRepositoryDescriptor
        {
            get
            {
                return _personRepositoryDescriptor ?? TestService.Core.PersonRepositoryDescriptor.Default;
            }
            set
            {
                _personRepositoryDescriptor = value;
            }
        }

        public virtual Person UpdatePerson(Person person, System.Threading.CancellationToken cancellation)
        {
            var request = new UpdatePersonParameters();
            request.Person = person;
            return Send<Person, UpdatePersonParameters>(request, PersonRepositoryDescriptor.UpdatePerson, cancellation);
        }

        public virtual Task<Person> UpdatePersonAsync(Person person, System.Threading.CancellationToken cancellation)
        {
            var request = new UpdatePersonParameters();
            request.Person = person;
            return SendAsync<Person, UpdatePersonParameters>(request, PersonRepositoryDescriptor.UpdatePerson, cancellation);
        }

        public virtual Person UpdatePersonThatThrowsInvalidOperationException(Person person)
        {
            var request = new UpdatePersonThatThrowsInvalidOperationExceptionParameters();
            request.Person = person;
            return Send<Person, UpdatePersonThatThrowsInvalidOperationExceptionParameters>(request, PersonRepositoryDescriptor.UpdatePersonThatThrowsInvalidOperationException, GetCancellationToken(PersonRepositoryDescriptor.UpdatePersonThatThrowsInvalidOperationException));
        }

        public virtual Task<Person> UpdatePersonThatThrowsInvalidOperationExceptionAsync(Person person)
        {
            var request = new UpdatePersonThatThrowsInvalidOperationExceptionParameters();
            request.Person = person;
            return SendAsync<Person, UpdatePersonThatThrowsInvalidOperationExceptionParameters>(request, PersonRepositoryDescriptor.UpdatePersonThatThrowsInvalidOperationException, GetCancellationToken(PersonRepositoryDescriptor.UpdatePersonThatThrowsInvalidOperationException));
        }

        public virtual Task DoLongRunningOperationAsync(Person person, System.Threading.CancellationToken cancellation)
        {
            var request = new DoLongRunningOperationAsyncParameters();
            request.Person = person;
            return SendAsync(request, PersonRepositoryDescriptor.DoLongRunningOperationAsync, cancellation);
        }

        public virtual Task DoLongRunningOperation2Async(System.Threading.CancellationToken cancellation)
        {
            var request = new DoLongRunningOperation2AsyncParameters();
            return SendAsync(request, PersonRepositoryDescriptor.DoLongRunningOperation2Async, cancellation);
        }

        public virtual Task LongRunningOperation2Async(System.Threading.CancellationToken cancellation)
        {
            var request = new LongRunningOperation2AsyncParameters();
            return SendAsync(request, PersonRepositoryDescriptor.LongRunningOperation2Async, cancellation);
        }

        public virtual Task DoNothingAsAsync()
        {
            var request = new DoNothingAsAsyncParameters();
            return SendAsync(request, PersonRepositoryDescriptor.DoNothingAsAsync, GetCancellationToken(PersonRepositoryDescriptor.DoNothingAsAsync));
        }

        public virtual void DoNothing()
        {
            var request = new DoNothingParameters();
            Send(request, PersonRepositoryDescriptor.DoNothing, GetCancellationToken(PersonRepositoryDescriptor.DoNothing));
        }

        public virtual Task DoNothingAsync()
        {
            var request = new DoNothingParameters();
            return SendAsync(request, PersonRepositoryDescriptor.DoNothing, GetCancellationToken(PersonRepositoryDescriptor.DoNothing));
        }

        public virtual Task DoNothingWithComplexParameterAsAsync(List<Person> person)
        {
            var request = new DoNothingWithComplexParameterAsAsyncParameters();
            request.Person = person;
            return SendAsync(request, PersonRepositoryDescriptor.DoNothingWithComplexParameterAsAsync, GetCancellationToken(PersonRepositoryDescriptor.DoNothingWithComplexParameterAsAsync));
        }

        public virtual void DoNothingWithComplexParameter(List<Person> person)
        {
            var request = new DoNothingWithComplexParameterParameters();
            request.Person = person;
            Send(request, PersonRepositoryDescriptor.DoNothingWithComplexParameter, GetCancellationToken(PersonRepositoryDescriptor.DoNothingWithComplexParameter));
        }

        public virtual Task DoNothingWithComplexParameterAsync(List<Person> person)
        {
            var request = new DoNothingWithComplexParameterParameters();
            request.Person = person;
            return SendAsync(request, PersonRepositoryDescriptor.DoNothingWithComplexParameter, GetCancellationToken(PersonRepositoryDescriptor.DoNothingWithComplexParameter));
        }

        public virtual int GetSimpleType(int arg)
        {
            var request = new GetSimpleTypeParameters();
            request.Arg = arg;
            return Send<int, GetSimpleTypeParameters>(request, PersonRepositoryDescriptor.GetSimpleType, GetCancellationToken(PersonRepositoryDescriptor.GetSimpleType));
        }

        public virtual Task<int> GetSimpleTypeAsync(int arg)
        {
            var request = new GetSimpleTypeParameters();
            request.Arg = arg;
            return SendAsync<int, GetSimpleTypeParameters>(request, PersonRepositoryDescriptor.GetSimpleType, GetCancellationToken(PersonRepositoryDescriptor.GetSimpleType));
        }

        public virtual Task GetSimpleTypeAsAsync(int arg)
        {
            var request = new GetSimpleTypeAsAsyncParameters();
            request.Arg = arg;
            return SendAsync(request, PersonRepositoryDescriptor.GetSimpleTypeAsAsync, GetCancellationToken(PersonRepositoryDescriptor.GetSimpleTypeAsAsync));
        }

        public virtual Person GetSinglePerson(Person person)
        {
            var request = new GetSinglePersonParameters();
            request.Person = person;
            return Send<Person, GetSinglePersonParameters>(request, PersonRepositoryDescriptor.GetSinglePerson, GetCancellationToken(PersonRepositoryDescriptor.GetSinglePerson));
        }

        public virtual Task<Person> GetSinglePersonAsync(Person person)
        {
            var request = new GetSinglePersonParameters();
            request.Person = person;
            return SendAsync<Person, GetSinglePersonParameters>(request, PersonRepositoryDescriptor.GetSinglePerson, GetCancellationToken(PersonRepositoryDescriptor.GetSinglePerson));
        }

        public virtual Task<Person> GetSinglePersonAsAsync(Person person)
        {
            var request = new GetSinglePersonAsAsyncParameters();
            request.Person = person;
            return SendAsync<Person, GetSinglePersonAsAsyncParameters>(request, PersonRepositoryDescriptor.GetSinglePersonAsAsync, GetCancellationToken(PersonRepositoryDescriptor.GetSinglePersonAsAsync));
        }

        public virtual List<Person> GetManyPersons(Person person)
        {
            var request = new GetManyPersonsParameters();
            request.Person = person;
            return Send<List<Person>, GetManyPersonsParameters>(request, PersonRepositoryDescriptor.GetManyPersons, GetCancellationToken(PersonRepositoryDescriptor.GetManyPersons));
        }

        public virtual Task<List<Person>> GetManyPersonsAsync(Person person)
        {
            var request = new GetManyPersonsParameters();
            request.Person = person;
            return SendAsync<List<Person>, GetManyPersonsParameters>(request, PersonRepositoryDescriptor.GetManyPersons, GetCancellationToken(PersonRepositoryDescriptor.GetManyPersons));
        }

        public virtual Task<List<Person>> GetManyPersonsAsAsync(Person person)
        {
            var request = new GetManyPersonsAsAsyncParameters();
            request.Person = person;
            return SendAsync<List<Person>, GetManyPersonsAsAsyncParameters>(request, PersonRepositoryDescriptor.GetManyPersonsAsAsync, GetCancellationToken(PersonRepositoryDescriptor.GetManyPersonsAsAsync));
        }
        public virtual void InnerOperation()
        {
            var request = new InnerOperationParameters();
            Send(request, PersonRepositoryDescriptor.InnerOperation, GetCancellationToken(PersonRepositoryDescriptor.InnerOperation));
        }

        public virtual Task InnerOperationAsync()
        {
            var request = new InnerOperationParameters();
            return SendAsync(request, PersonRepositoryDescriptor.InnerOperation, GetCancellationToken(PersonRepositoryDescriptor.InnerOperation));
        }

        public virtual Task InnerOperationExAsync()
        {
            var request = new InnerOperationExAsyncParameters();
            return SendAsync(request, PersonRepositoryDescriptor.InnerOperationExAsync, GetCancellationToken(PersonRepositoryDescriptor.InnerOperationExAsync));
        }
        public virtual void InnerOperation2()
        {
            var request = new InnerOperation2Parameters();
            Send(request, PersonRepositoryDescriptor.InnerOperation2, GetCancellationToken(PersonRepositoryDescriptor.InnerOperation2));
        }

        public virtual Task InnerOperation2Async()
        {
            var request = new InnerOperation2Parameters();
            return SendAsync(request, PersonRepositoryDescriptor.InnerOperation2, GetCancellationToken(PersonRepositoryDescriptor.InnerOperation2));
        }

        public virtual Task InnerOperationExAsync2()
        {
            var request = new InnerOperationExAsync2Parameters();
            return SendAsync(request, PersonRepositoryDescriptor.InnerOperationExAsync2, GetCancellationToken(PersonRepositoryDescriptor.InnerOperationExAsync2));
        }
    }
}


