//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bolt.Server;
using Owin;
using TestService.Core;
using TestService.Core.Parameters;


namespace TestService.Core
{
    public partial class TestContractInvoker : Bolt.Server.ContractInvoker<TestService.Core.TestContractDescriptor>
    {
        public override void Init()
        {
            AddAction(Descriptor.UpdatePerson, TestContract_UpdatePerson);
            AddAction(Descriptor.UpdatePersonThatThrowsInvalidOperationException, TestContract_UpdatePersonThatThrowsInvalidOperationException);
            AddAction(Descriptor.DoNothingAsAsync, TestContract_DoNothingAsAsync);
            AddAction(Descriptor.DoNothing, TestContract_DoNothing);
            AddAction(Descriptor.DoNothingWithComplexParameterAsAsync, TestContract_DoNothingWithComplexParameterAsAsync);
            AddAction(Descriptor.DoNothingWithComplexParameter, TestContract_DoNothingWithComplexParameter);
            AddAction(Descriptor.GetSimpleType, TestContract_GetSimpleType);
            AddAction(Descriptor.GetSimpleTypeAsAsync, TestContract_GetSimpleTypeAsAsync);
            AddAction(Descriptor.GetSinglePerson, TestContract_GetSinglePerson);
            AddAction(Descriptor.GetSinglePersonAsAsync, TestContract_GetSinglePersonAsAsync);
            AddAction(Descriptor.GetManyPersons, TestContract_GetManyPersons);
            AddAction(Descriptor.GetManyPersonsAsAsync, TestContract_GetManyPersonsAsAsync);
            AddAction(Descriptor.Throws, TestContract_Throws);
            AddAction(Descriptor.ThrowsCustom, TestContract_ThrowsCustom);
            AddAction(Descriptor.InnerOperation, InnerTestContract_InnerOperation);
            AddAction(Descriptor.InnerOperationExAsync, InnerTestContract_InnerOperationExAsync);
            AddAction(Descriptor.InnerOperation2, InnerTestContract2_InnerOperation2);
            AddAction(Descriptor.InnerOperationExAsync2, InnerTestContract2_InnerOperationExAsync2);

            base.Init();
        }

        protected virtual async Task TestContract_UpdatePerson(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<UpdatePersonParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                var result = instance.UpdatePerson(parameters.Person, context.CallCancelled);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_UpdatePersonThatThrowsInvalidOperationException(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<UpdatePersonThatThrowsInvalidOperationExceptionParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                var result = instance.UpdatePersonThatThrowsInvalidOperationException(parameters.Person);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_DoNothingAsAsync(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                await instance.DoNothingAsAsync();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_DoNothing(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                instance.DoNothing();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_DoNothingWithComplexParameterAsAsync(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<DoNothingWithComplexParameterAsAsyncParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                await instance.DoNothingWithComplexParameterAsAsync(parameters.Person);
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_DoNothingWithComplexParameter(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<DoNothingWithComplexParameterParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                instance.DoNothingWithComplexParameter(parameters.Person);
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_GetSimpleType(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<GetSimpleTypeParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                var result = instance.GetSimpleType(parameters.Arg);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_GetSimpleTypeAsAsync(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<GetSimpleTypeAsAsyncParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                await instance.GetSimpleTypeAsAsync(parameters.Arg);
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_GetSinglePerson(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<GetSinglePersonParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                var result = instance.GetSinglePerson(parameters.Person);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_GetSinglePersonAsAsync(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<GetSinglePersonAsAsyncParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                var result = await instance.GetSinglePersonAsAsync(parameters.Person);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_GetManyPersons(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                var result = instance.GetManyPersons();
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_GetManyPersonsAsAsync(Bolt.Server.ServerActionContext context)
        {
            var parameters = await DataHandler.ReadParametersAsync<GetManyPersonsAsAsyncParameters>(context);
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                var result = await instance.GetManyPersonsAsAsync(parameters.Person);
                await ResponseHandler.Handle(context, result);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_Throws(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                instance.Throws();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task TestContract_ThrowsCustom(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<ITestContract>(context);
            try
            {
                instance.ThrowsCustom();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task InnerTestContract_InnerOperation(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<IInnerTestContract>(context);
            try
            {
                instance.InnerOperation();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task InnerTestContract_InnerOperationExAsync(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<IInnerTestContract>(context);
            try
            {
                await instance.InnerOperationExAsync();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task InnerTestContract2_InnerOperation2(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<IInnerTestContract2>(context);
            try
            {
                instance.InnerOperation2();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }

        protected virtual async Task InnerTestContract2_InnerOperationExAsync2(Bolt.Server.ServerActionContext context)
        {
            var instance = InstanceProvider.GetInstance<IInnerTestContract2>(context);
            try
            {
                await instance.InnerOperationExAsync2();
                await ResponseHandler.Handle(context);
                InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }
        }
    }
}

namespace Bolt.Server
{
    public static partial class TestContractInvokerExtensions
    {
        public static IAppBuilder UseTestContract(this IAppBuilder app, TestService.Core.ITestContract instance)
        {
            return app.UseTestContract(new StaticInstanceProvider(instance));
        }

        public static IAppBuilder UseTestContract<TImplementation>(this IAppBuilder app) where TImplementation: TestService.Core.ITestContract, new()
        {
            return app.UseTestContract(new InstanceProvider<TImplementation>());
        }

        public static IAppBuilder UseStateFullTestContract<TImplementation>(this IAppBuilder app, ActionDescriptor initInstanceAction, ActionDescriptor releaseInstanceAction, string sessionHeader = null, TimeSpan? sessionTimeout = null) where TImplementation: TestService.Core.ITestContract, new()
        {
            return app.UseTestContract(new StateFullInstanceProvider<TImplementation>(initInstanceAction, releaseInstanceAction, sessionHeader ?? app.GetBolt().Configuration.SessionHeader, sessionTimeout ?? app.GetBolt().Configuration.StateFullInstanceLifetime));
        }

        public static IAppBuilder UseTestContract(this IAppBuilder app, IInstanceProvider instanceProvider)
        {
            var boltExecutor = app.GetBolt();
            var invoker = new TestService.Core.TestContractInvoker();
            invoker.Init(boltExecutor.Configuration);
            invoker.InstanceProvider = instanceProvider;
            boltExecutor.Add(invoker);

            return app;
        }
    }
}