//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bolt.Server;
using Bolt.Server.InstanceProviders;
using TestService.Core;
using TestService.Core.Parameters;


namespace TestService.Core
{
    public partial class TestContractInvoker : Bolt.Server.ContractInvoker<TestService.Core.TestContractDescriptor>
    {
        protected override void InitActions()
        {
            AddAction(Descriptor.UpdatePerson, TestContract_UpdatePerson);
            AddAction(Descriptor.UpdatePersonThatThrowsInvalidOperationException, TestContract_UpdatePersonThatThrowsInvalidOperationException);
            AddAction(Descriptor.DoNothingAsAsync, TestContract_DoNothingAsAsync);
            AddAction(Descriptor.DoNothing, TestContract_DoNothing);
            AddAction(Descriptor.DoNothingWithComplexParameterAsAsync, TestContract_DoNothingWithComplexParameterAsAsync);
            AddAction(Descriptor.DoNothingWithComplexParameter, TestContract_DoNothingWithComplexParameter);
            AddAction(Descriptor.GetSimpleType, TestContract_GetSimpleType);
            AddAction(Descriptor.GetSimpleTypeAsAsync, TestContract_GetSimpleTypeAsAsync);
            AddAction(Descriptor.GetSinglePerson, TestContract_GetSinglePerson);
            AddAction(Descriptor.GetSinglePersonAsAsync, TestContract_GetSinglePersonAsAsync);
            AddAction(Descriptor.GetManyPersons, TestContract_GetManyPersons);
            AddAction(Descriptor.GetManyPersonsAsAsync, TestContract_GetManyPersonsAsAsync);
            AddAction(Descriptor.Throws, TestContract_Throws);
            AddAction(Descriptor.ThrowsCustom, TestContract_ThrowsCustom);
            AddAction(Descriptor.InnerOperation, InnerTestContract_InnerOperation);
            AddAction(Descriptor.InnerOperation3, InnerTestContract_InnerOperation3);
            AddAction(Descriptor.InnerOperationExAsync, InnerTestContract_InnerOperationExAsync);
            AddAction(Descriptor.InnerOperation2, InnerTestContract2_InnerOperation2);
            AddAction(Descriptor.InnerOperationExAsync2, InnerTestContract2_InnerOperationExAsync2);
        }

        protected virtual async Task TestContract_UpdatePerson(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.UpdatePersonParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);
            Person result;

            try
            {
                result = instance.UpdatePerson(parameters.Person, context.RequestAborted);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task TestContract_UpdatePersonThatThrowsInvalidOperationException(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.UpdatePersonThatThrowsInvalidOperationExceptionParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);
            Person result;

            try
            {
                result = instance.UpdatePersonThatThrowsInvalidOperationException(parameters.Person);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task TestContract_DoNothingAsAsync(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);

            try
            {
                await instance.DoNothingAsAsync();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task TestContract_DoNothing(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);

            try
            {
                instance.DoNothing();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task TestContract_DoNothingWithComplexParameterAsAsync(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.DoNothingWithComplexParameterAsAsyncParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);

            try
            {
                await instance.DoNothingWithComplexParameterAsAsync(parameters.Person);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task TestContract_DoNothingWithComplexParameter(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.DoNothingWithComplexParameterParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);

            try
            {
                instance.DoNothingWithComplexParameter(parameters.Person);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task TestContract_GetSimpleType(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.GetSimpleTypeParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);
            int result;

            try
            {
                result = instance.GetSimpleType(parameters.Arg);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task TestContract_GetSimpleTypeAsAsync(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.GetSimpleTypeAsAsyncParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);

            try
            {
                await instance.GetSimpleTypeAsAsync(parameters.Arg);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task TestContract_GetSinglePerson(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.GetSinglePersonParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);
            Person result;

            try
            {
                result = instance.GetSinglePerson(parameters.Person);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task TestContract_GetSinglePersonAsAsync(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.GetSinglePersonAsAsyncParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);
            Person result;

            try
            {
                result = await instance.GetSinglePersonAsAsync(parameters.Person);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task TestContract_GetManyPersons(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);
            List<Person> result;

            try
            {
                result = instance.GetManyPersons();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task TestContract_GetManyPersonsAsAsync(ServerActionContext context)
        {
            var parameters = await context.DataHandler.ReadParametersAsync<TestService.Core.Parameters.GetManyPersonsAsAsyncParameters>(context);
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);
            List<Person> result;

            try
            {
                result = await instance.GetManyPersonsAsAsync(parameters.Person);
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task TestContract_Throws(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);

            try
            {
                instance.Throws();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task TestContract_ThrowsCustom(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<ITestContract>(context);

            try
            {
                instance.ThrowsCustom();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task InnerTestContract_InnerOperation(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<IInnerTestContract>(context);

            try
            {
                instance.InnerOperation();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task InnerTestContract_InnerOperation3(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<IInnerTestContract>(context);
            string result;

            try
            {
                result = await instance.InnerOperation3();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context, result);
        }

        protected virtual async Task InnerTestContract_InnerOperationExAsync(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<IInnerTestContract>(context);

            try
            {
                await instance.InnerOperationExAsync();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task InnerTestContract2_InnerOperation2(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<IInnerTestContract2>(context);

            try
            {
                instance.InnerOperation2();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }

        protected virtual async Task InnerTestContract2_InnerOperationExAsync2(ServerActionContext context)
        {
            var instance = context.InstanceProvider.GetInstance<IInnerTestContract2>(context);

            try
            {
                await instance.InnerOperationExAsync2();
                context.InstanceProvider.ReleaseInstance(context, instance, null);
            }
            catch (Exception e)
            {
                context.InstanceProvider.ReleaseInstance(context, instance, e);
                throw;
            }

            await context.ResponseHandler.Handle(context);
        }
    }
}

namespace Bolt.Server
{
    public static partial class TestContractInvokerExtensions
    {
    }
}
/*
Execution of 'ServerGenerator' generator failed with error 'System.IO.FileLoadException: Could not load file or assembly 'Bolt.Core, Version=0.11.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. Invalid pointer (Exception from HRESULT: 0x80004003 (E_POINTER))
File name: 'Bolt.Core, Version=0.11.0.0, Culture=neutral, PublicKeyToken=null' ---> System.NullReferenceException: Object reference not set to an instance of an object.
   at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive(ICache cache, ILibraryManager manager, ILibraryExportProvider libraryExportProvider, ILibraryKey target, Func`2 include)
   at Microsoft.Framework.Runtime.ProjectExportProviderHelper.GetExportsRecursive(ICache cache, ILibraryManager manager, ILibraryExportProvider libraryExportProvider, ILibraryKey target, Boolean dependenciesOnly)
   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass1.<GetLibraryExport>b__5()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at System.Lazy`1.get_Value()
   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass2.<GetLibraryExport>b__6()
   at Microsoft.Framework.Runtime.Roslyn.RoslynProjectReferenceProvider.GetProjectReference(Project project, ILibraryKey target, Func`1 referenceResolver, IList`1 outgoingReferences)
   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.<>c__DisplayClass0.<GetLibraryExport>b__3(CacheContext ctx)
   at Microsoft.Framework.Runtime.CacheExtensions.<>c__DisplayClass0`1.<Get>b__1(CacheContext ctx)
   at Microsoft.Framework.Runtime.Cache.CreateEntry(Object k, Func`2 acquire)
   at Microsoft.Framework.Runtime.Cache.<>c__DisplayClass10.<AddEntry>b__11()
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at System.Lazy`1.get_Value()
   at Microsoft.Framework.Runtime.Cache.Get(Object key, Func`2 factory)
   at Microsoft.Framework.Runtime.CacheExtensions.Get[T](ICache cache, Object key, Func`2 factory)
   at Microsoft.Framework.Runtime.ProjectLibraryExportProvider.GetLibraryExport(ILibraryKey target)
   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.<>c__DisplayClass0.<GetLibraryExport>b__1(ILibraryExportProvider r)
   at System.Linq.Enumerable.WhereSelectArrayIterator`2.MoveNext()
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at Microsoft.Framework.Runtime.CompositeLibraryExportProvider.GetLibraryExport(ILibraryKey target)
   at Microsoft.Framework.Runtime.LibraryManager.GetLibraryExport(String name, String aspect)
   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(String name, IAssemblyLoadContext loadContext)
   at Microsoft.Framework.Runtime.Loader.ProjectAssemblyLoader.Load(String name)
   at klr.host.LoaderContainer.Load(String name)
   at klr.hosting.RuntimeBootstrapper.<>c__DisplayClass0.<ExecuteAsync>b__8(AssemblyName assemblyName)
   at klr.hosting.RuntimeBootstrapper.<>c__DisplayClass0.<ExecuteAsync>b__11(Object sender, ResolveEventArgs a)
   at System.AppDomain.OnAssemblyResolveEvent(RuntimeAssembly assembly, String assemblyFullName)
   at System.ModuleHandle.ResolveMethod(RuntimeModule module, Int32 methodToken, IntPtr* typeInstArgs, Int32 typeInstCount, IntPtr* methodInstArgs, Int32 methodInstCount)
   at System.ModuleHandle.ResolveMethodHandleInternalCore(RuntimeModule module, Int32 methodToken, IntPtr[] typeInstantiationContext, Int32 typeInstCount, IntPtr[] methodInstantiationContext, Int32 methodInstCount)
   at System.ModuleHandle.ResolveMethodHandleInternal(RuntimeModule module, Int32 methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext)
   at System.Reflection.CustomAttributeData..ctor(RuntimeModule scope, CustomAttributeRecord caRecord)
   at System.Reflection.CustomAttributeData.GetCustomAttributes(RuntimeModule module, Int32 tkTarget)
   at System.Reflection.CustomAttributeData.GetCustomAttributesInternal(RuntimeMethodInfo target)
   at System.Reflection.RuntimeMethodInfo.GetCustomAttributesData()
   at System.Reflection.MemberInfo.get_CustomAttributes()
   at Bolt.Generators.ContractDefinition.<>c__DisplayClass3.<GetInitSessionMethod>b__4(MethodInfo m) in F:\Projects\GitHub\Bolt\Bolt\src\Bolt.Generators\ContractDefinition.cs:line 90
   at System.Linq.Enumerable.FirstOrDefault[TSource](IEnumerable`1 source, Func`2 predicate)
   at Bolt.Generators.ContractDefinition.GetInitSessionMethod() in F:\Projects\GitHub\Bolt\Bolt\src\Bolt.Generators\ContractDefinition.cs:line 90
   at Bolt.Generators.ContractInvokerExtensionGenerator.GenerateBody(ClassGenerator g) in F:\Projects\GitHub\Bolt\Bolt\src\Bolt.Generators\ContractInvokerExtensionGenerator.cs:line 37
   at Bolt.Generators.ClassGenerator.Generate(Object context) in F:\Projects\GitHub\Bolt\Bolt\src\Bolt.Generators\ClassGenerator.cs:line 111
   at Bolt.Generators.ContractInvokerExtensionGenerator.Generate(Object context) in F:\Projects\GitHub\Bolt\Bolt\src\Bolt.Generators\ContractInvokerExtensionGenerator.cs:line 30
   at Bolt.Generators.ServerGenerator.Generate(Object context) in F:\Projects\GitHub\Bolt\Bolt\src\Bolt.Generators\ServerGenerator.cs:line 80
   at Bolt.Generators.DocumentGenerator.Generate(Object context) in F:\Projects\GitHub\Bolt\Bolt\src\Bolt.Generators\DocumentGenerator.cs:line 56

'
*/