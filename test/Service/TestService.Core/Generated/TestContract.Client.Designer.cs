//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Client.Channels;
using TestService.Core;
using TestService.Core.Parameters;


namespace TestService.Core
{
    public partial interface IInnerTestContractAsync : IInnerTestContract
    {
        Task InnerOperationAsync();
    }
}

namespace TestService.Core
{
    public partial interface IInnerTestContract2Async : IInnerTestContract2
    {
        Task InnerOperation2Async();
    }
}

namespace TestService.Core
{
    public partial interface ITestContractAsync : ITestContract, IInnerTestContractAsync, IInnerTestContract2Async
    {
        Task<Person> UpdatePersonAsync(Person person, System.Threading.CancellationToken cancellation);

        Task<Person> UpdatePersonThatThrowsInvalidOperationExceptionAsync(Person person);

        Task DoNothingAsync();

        Task DoNothingWithComplexParameterAsync(List<Person> person);

        Task<int> GetSimpleTypeAsync(int arg);

        Task<Person> GetSinglePersonAsync(Person person);

        Task<List<Person>> GetManyPersonsAsync();

        Task ThrowsAsync();

        Task ThrowsCustomAsync();
    }
}

namespace TestService.Core
{
    public partial class TestContractProxy : ContractProxy<TestService.Core.TestContractDescriptor>, TestService.Core.ITestContract, IInnerTestContractAsync, IInnerTestContract2Async, ITestContractAsync
    {
        public TestContractProxy(TestService.Core.TestContractProxy proxy) : base(proxy)
        {
        }

        public TestContractProxy(IChannel channel) : base(channel)
        {
        }

        public virtual Person UpdatePerson(Person person, CancellationToken cancellation)
        {
            var bolt_Params = new TestService.Core.Parameters.UpdatePersonParameters();
            bolt_Params.Person = person;
            return Send<Person, TestService.Core.Parameters.UpdatePersonParameters>(bolt_Params, Descriptor.UpdatePerson, cancellation);
        }

        public virtual Task<Person> UpdatePersonAsync(Person person, CancellationToken cancellation)
        {
            var bolt_Params = new TestService.Core.Parameters.UpdatePersonParameters();
            bolt_Params.Person = person;
            return SendAsync<Person, TestService.Core.Parameters.UpdatePersonParameters>(bolt_Params, Descriptor.UpdatePerson, cancellation);
        }

        public virtual Person UpdatePersonThatThrowsInvalidOperationException(Person person)
        {
            var bolt_Params = new TestService.Core.Parameters.UpdatePersonThatThrowsInvalidOperationExceptionParameters();
            bolt_Params.Person = person;
            return Send<Person, TestService.Core.Parameters.UpdatePersonThatThrowsInvalidOperationExceptionParameters>(bolt_Params, Descriptor.UpdatePersonThatThrowsInvalidOperationException, CancellationToken.None);
        }

        public virtual Task<Person> UpdatePersonThatThrowsInvalidOperationExceptionAsync(Person person)
        {
            var bolt_Params = new TestService.Core.Parameters.UpdatePersonThatThrowsInvalidOperationExceptionParameters();
            bolt_Params.Person = person;
            return SendAsync<Person, TestService.Core.Parameters.UpdatePersonThatThrowsInvalidOperationExceptionParameters>(bolt_Params, Descriptor.UpdatePersonThatThrowsInvalidOperationException, CancellationToken.None);
        }

        public virtual Task DoNothingAsAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.DoNothingAsAsync, CancellationToken.None);
        }

        public virtual void DoNothing()
        {
            Send(Bolt.Empty.Instance, Descriptor.DoNothing, CancellationToken.None);
        }

        public virtual Task DoNothingAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.DoNothing, CancellationToken.None);
        }

        public virtual Task DoNothingWithComplexParameterAsAsync(List<Person> person)
        {
            var bolt_Params = new TestService.Core.Parameters.DoNothingWithComplexParameterAsAsyncParameters();
            bolt_Params.Person = person;
            return SendAsync(bolt_Params, Descriptor.DoNothingWithComplexParameterAsAsync, CancellationToken.None);
        }

        public virtual void DoNothingWithComplexParameter(List<Person> person)
        {
            var bolt_Params = new TestService.Core.Parameters.DoNothingWithComplexParameterParameters();
            bolt_Params.Person = person;
            Send(bolt_Params, Descriptor.DoNothingWithComplexParameter, CancellationToken.None);
        }

        public virtual Task DoNothingWithComplexParameterAsync(List<Person> person)
        {
            var bolt_Params = new TestService.Core.Parameters.DoNothingWithComplexParameterParameters();
            bolt_Params.Person = person;
            return SendAsync(bolt_Params, Descriptor.DoNothingWithComplexParameter, CancellationToken.None);
        }

        public virtual int GetSimpleType(int arg)
        {
            var bolt_Params = new TestService.Core.Parameters.GetSimpleTypeParameters();
            bolt_Params.Arg = arg;
            return Send<int, TestService.Core.Parameters.GetSimpleTypeParameters>(bolt_Params, Descriptor.GetSimpleType, CancellationToken.None);
        }

        public virtual Task<int> GetSimpleTypeAsync(int arg)
        {
            var bolt_Params = new TestService.Core.Parameters.GetSimpleTypeParameters();
            bolt_Params.Arg = arg;
            return SendAsync<int, TestService.Core.Parameters.GetSimpleTypeParameters>(bolt_Params, Descriptor.GetSimpleType, CancellationToken.None);
        }

        public virtual Task GetSimpleTypeAsAsync(int arg)
        {
            var bolt_Params = new TestService.Core.Parameters.GetSimpleTypeAsAsyncParameters();
            bolt_Params.Arg = arg;
            return SendAsync(bolt_Params, Descriptor.GetSimpleTypeAsAsync, CancellationToken.None);
        }

        public virtual Person GetSinglePerson(Person person)
        {
            var bolt_Params = new TestService.Core.Parameters.GetSinglePersonParameters();
            bolt_Params.Person = person;
            return Send<Person, TestService.Core.Parameters.GetSinglePersonParameters>(bolt_Params, Descriptor.GetSinglePerson, CancellationToken.None);
        }

        public virtual Task<Person> GetSinglePersonAsync(Person person)
        {
            var bolt_Params = new TestService.Core.Parameters.GetSinglePersonParameters();
            bolt_Params.Person = person;
            return SendAsync<Person, TestService.Core.Parameters.GetSinglePersonParameters>(bolt_Params, Descriptor.GetSinglePerson, CancellationToken.None);
        }

        public virtual Task<Person> GetSinglePersonAsAsync(Person person)
        {
            var bolt_Params = new TestService.Core.Parameters.GetSinglePersonAsAsyncParameters();
            bolt_Params.Person = person;
            return SendAsync<Person, TestService.Core.Parameters.GetSinglePersonAsAsyncParameters>(bolt_Params, Descriptor.GetSinglePersonAsAsync, CancellationToken.None);
        }

        public virtual List<Person> GetManyPersons()
        {
            return Send<List<Person>, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.GetManyPersons, CancellationToken.None);
        }

        public virtual Task<List<Person>> GetManyPersonsAsync()
        {
            return SendAsync<List<Person>, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.GetManyPersons, CancellationToken.None);
        }

        public virtual Task<List<Person>> GetManyPersonsAsAsync(Person person)
        {
            var bolt_Params = new TestService.Core.Parameters.GetManyPersonsAsAsyncParameters();
            bolt_Params.Person = person;
            return SendAsync<List<Person>, TestService.Core.Parameters.GetManyPersonsAsAsyncParameters>(bolt_Params, Descriptor.GetManyPersonsAsAsync, CancellationToken.None);
        }

        public virtual void Throws()
        {
            Send(Bolt.Empty.Instance, Descriptor.Throws, CancellationToken.None);
        }

        public virtual Task ThrowsAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.Throws, CancellationToken.None);
        }

        public virtual void ThrowsCustom()
        {
            Send(Bolt.Empty.Instance, Descriptor.ThrowsCustom, CancellationToken.None);
        }

        public virtual Task ThrowsCustomAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.ThrowsCustom, CancellationToken.None);
        }

        public virtual void InnerOperation()
        {
            Send(Bolt.Empty.Instance, Descriptor.InnerOperation, CancellationToken.None);
        }

        public virtual Task InnerOperationAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.InnerOperation, CancellationToken.None);
        }

        public virtual Task<string> InnerOperation3()
        {
            return SendAsync<string, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.InnerOperation3, CancellationToken.None);
        }

        public virtual Task InnerOperationExAsync()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.InnerOperationExAsync, CancellationToken.None);
        }
        public virtual void InnerOperation2()
        {
            Send(Bolt.Empty.Instance, Descriptor.InnerOperation2, CancellationToken.None);
        }

        public virtual Task InnerOperation2Async()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.InnerOperation2, CancellationToken.None);
        }

        public virtual Task InnerOperationExAsync2()
        {
            return SendAsync(Bolt.Empty.Instance, Descriptor.InnerOperationExAsync2, CancellationToken.None);
        }
    }
}