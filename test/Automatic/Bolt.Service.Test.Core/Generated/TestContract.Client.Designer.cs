//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Bolt.Client;
using Bolt.Client.Channels;
using Bolt.Service.Test.Core;
using Bolt.Service.Test.Core.Parameters;


namespace Bolt.Service.Test.Core
{
    public partial interface ITestContractInnerAsync : ITestContractInner
    {
        Task SimpleMethodWithComplexParameterAsync(CompositeType compositeType);

        Task MethodWithNotSerializableTypeAsync(NotSerializableType arg);

        Task<NotSerializableType> FunctionWithNotSerializableTypeAsync();
    }
}

namespace Bolt.Service.Test.Core
{
    public partial interface ITestContractAsync : ITestContract, ITestContractInnerAsync
    {
        Task SimpleMethodAsync();
    }
}

namespace Bolt.Service.Test.Core
{
    public partial class TestContractProxy : ContractProxy<Bolt.Service.Test.Core.TestContractDescriptor>, Bolt.Service.Test.Core.ITestContract, ITestContractInnerAsync, ITestContractAsync
    {
        // useless comment added by user generator - 'Bolt.Service.Test.Core.UserCodeGenerator', Context - 'generatorContext2'

        public TestContractProxy(Bolt.Service.Test.Core.TestContractProxy proxy) : base(proxy)
        {
        }

        public TestContractProxy(IChannel channel) : base(channel)
        {
        }

        public virtual void SimpleMethodWithSimpleArguments(int val)
        {
            var bolt_Params = new SimpleMethodWithSimpleArgumentsParameters();
            bolt_Params.Val = val;
            Channel.Send(bolt_Params, Descriptor.SimpleMethodWithSimpleArguments, GetCancellationToken(Descriptor.SimpleMethodWithSimpleArguments));
        }

        public virtual void SimpleMethod()
        {
            Channel.Send(Bolt.Empty.Instance, Descriptor.SimpleMethod, GetCancellationToken(Descriptor.SimpleMethod));
        }

        public virtual Task SimpleMethodAsync()
        {
            return Channel.SendAsync(Bolt.Empty.Instance, Descriptor.SimpleMethod, GetCancellationToken(Descriptor.SimpleMethod));
        }

        public virtual Task SimpleMethodExAsync()
        {
            return Channel.SendAsync(Bolt.Empty.Instance, Descriptor.SimpleMethodExAsync, GetCancellationToken(Descriptor.SimpleMethodExAsync));
        }

        public virtual void SimpleMethodWithCancellation(System.Threading.CancellationToken cancellation)
        {
            Channel.Send(Bolt.Empty.Instance, Descriptor.SimpleMethodWithCancellation, cancellation);
        }

        public virtual CompositeType ComplexFunction()
        {
            return Channel.Send<CompositeType, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.ComplexFunction, GetCancellationToken(Descriptor.ComplexFunction));
        }
        public virtual void SimpleMethodWithComplexParameter(CompositeType compositeType)
        {
            var bolt_Params = new SimpleMethodWithComplexParameterParameters();
            bolt_Params.CompositeType = compositeType;
            Channel.Send(bolt_Params, Descriptor.SimpleMethodWithComplexParameter, GetCancellationToken(Descriptor.SimpleMethodWithComplexParameter));
        }

        public virtual Task SimpleMethodWithComplexParameterAsync(CompositeType compositeType)
        {
            var bolt_Params = new SimpleMethodWithComplexParameterParameters();
            bolt_Params.CompositeType = compositeType;
            return Channel.SendAsync(bolt_Params, Descriptor.SimpleMethodWithComplexParameter, GetCancellationToken(Descriptor.SimpleMethodWithComplexParameter));
        }

        public virtual int SimpleFunction()
        {
            return Channel.Send<int, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.SimpleFunction, GetCancellationToken(Descriptor.SimpleFunction));
        }

        public virtual List<CompositeType> FunctionReturningHugeData()
        {
            return Channel.Send<List<CompositeType>, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.FunctionReturningHugeData, GetCancellationToken(Descriptor.FunctionReturningHugeData));
        }

        public virtual void MethodTakingHugeData(List<CompositeType> arg)
        {
            var bolt_Params = new MethodTakingHugeDataParameters();
            bolt_Params.Arg = arg;
            Channel.Send(bolt_Params, Descriptor.MethodTakingHugeData, GetCancellationToken(Descriptor.MethodTakingHugeData));
        }

        public virtual void MethodWithNotSerializableType(NotSerializableType arg)
        {
            var bolt_Params = new MethodWithNotSerializableTypeParameters();
            bolt_Params.Arg = arg;
            Channel.Send(bolt_Params, Descriptor.MethodWithNotSerializableType, GetCancellationToken(Descriptor.MethodWithNotSerializableType));
        }

        public virtual Task MethodWithNotSerializableTypeAsync(NotSerializableType arg)
        {
            var bolt_Params = new MethodWithNotSerializableTypeParameters();
            bolt_Params.Arg = arg;
            return Channel.SendAsync(bolt_Params, Descriptor.MethodWithNotSerializableType, GetCancellationToken(Descriptor.MethodWithNotSerializableType));
        }

        public virtual NotSerializableType FunctionWithNotSerializableType()
        {
            return Channel.Send<NotSerializableType, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.FunctionWithNotSerializableType, GetCancellationToken(Descriptor.FunctionWithNotSerializableType));
        }

        public virtual Task<NotSerializableType> FunctionWithNotSerializableTypeAsync()
        {
            return Channel.SendAsync<NotSerializableType, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.FunctionWithNotSerializableType, GetCancellationToken(Descriptor.FunctionWithNotSerializableType));
        }

        public virtual Task<int> SimpleAsyncFunction()
        {
            return Channel.SendAsync<int, Bolt.Empty>(Bolt.Empty.Instance, Descriptor.SimpleAsyncFunction, GetCancellationToken(Descriptor.SimpleAsyncFunction));
        }

        public virtual void MethodWithManyArguments(CompositeType arg1, CompositeType arg2, DateTime time)
        {
            var bolt_Params = new MethodWithManyArgumentsParameters();
            bolt_Params.Arg1 = arg1;
            bolt_Params.Arg2 = arg2;
            bolt_Params.Time = time;
            Channel.Send(bolt_Params, Descriptor.MethodWithManyArguments, GetCancellationToken(Descriptor.MethodWithManyArguments));
        }
        public virtual void ThisMethodShouldBeExcluded()
        {
            Channel.Send(Bolt.Empty.Instance, Descriptor.ThisMethodShouldBeExcluded, GetCancellationToken(Descriptor.ThisMethodShouldBeExcluded));
        }
    }
}