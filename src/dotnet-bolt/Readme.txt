You have installed tool for Bolt Client and Server side code generation. 

Bolt works best with following project structure:

----| <Contracts>.csproj			- project with contracts ( interfaces) that define your service
----| <Contracts>.Client.csproj		- client side code
----| <Contracts>.Server.csproj		- server side code (Katana based host)


To start using Bolt add following post build event to <Contracts>.csproj

<<<------------------------------------------------------------->>>

	cd "$(SolutionDir)\packages\bolt.tool*\tools"
	Bolt.exe -output="$(ProjectDir)\" -fromAssembly=$(TargetPath)

<<<------------------------------------------------------------->>>


After the build the client and server side code will be generated under the project directory for all interfaces.

The generated files have following format by default

<Contract>.Client.cs	- used only on client
<Contract>.Contract.cs	- used by both server and client
<Contract>.Server.cs	- used only on server

-----------------| Server |-----------------

Link <Contract>.Contract.cs, <Contract>.Server.cs files into the project and use folowing code in your Startup class:

    public void Configuration(IAppBuilder app)
    {
		var serializer = new JsonSerializer();
        app.UseBolt(new ServerConfiguration(serializer, new JsonExceptionSerializer(serializer)));
        app.UseContract<ContractImplementation>(); // this is helper extensions generated by Bolt for each contract
    }

 
-----------------| Client |-----------------

Link <Contract>.Contract.cs, <Contract>.Client.cs files and use folowing code:

	var serializer = new JsonSerializer();
	var config = new ClientConfiguration(serializer, new JsonExceptionSerializer(serializer), new DefaultWebRequestHandlerEx()); // needs to match server configuration
	var proxy = config.CreateProxy<ContractProxy>("<ServerUrl>")


-----------------| If you require detailed control of generated code: |-------------

1. Add 'Configuration.json' file to <Contracts>.csproj

   To generate the 'Configuration.json' file from existing assembly use 'Bolt.exe -createConfig=<AssemblyPath>' command that 
   will generate configuration for all interfaces in the assembly. You can then customize the configuration by your needs.

2. Define post build step in target project. In most cases the script will look like:

<<<------------------------------------------------------------->>>

	cd "$(SolutionDir)\packages\bolt.tool*\tools"
	Bolt.exe -root="$(TargetDir)\" -fromConfig="$(ProjectDir)Configuration.json"

<<<------------------------------------------------------------->>>

For more information visit the project site:
https://github.com/justkao/Bolt