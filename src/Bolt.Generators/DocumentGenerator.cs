using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Bolt.Generators
{
    public class DocumentGenerator : ContractGeneratorBase
    {
        private const string Warning = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.

//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";

        private readonly List<GeneratorBase> _contractGenerator = new List<GeneratorBase>();

        public DocumentGenerator()
            : this(new StringWriter(), new TypeFormatter(), new IntendProvider())
        {
        }

        public DocumentGenerator(StringWriter output, TypeFormatter formatter, IntendProvider intendProvider)
            : base(output, formatter, intendProvider)
        {
        }

        public static DocumentGenerator Create(ContractDefinition contract = null)
        {
            return new DocumentGenerator
            {
                ContractDefinition = contract
            };
        }

        public object Context { get; set; }

        public string GetResult(object context = null)
        {
            Generate(context ?? Context);
            return Output.GetStringBuilder().ToString().Trim();
        }

        public override void Generate(object context)
        {
            WriteLine();

            foreach (GeneratorBase generator in _contractGenerator)
            {
                try
                {
                    generator.Generate(context);
                }
                catch (Exception e)
                {
                    WriteLine("/*");
                    WriteLine("Execution of '{0}' generator failed with error '{1}'", generator.GetType().Name, e.ToString());
                    WriteLine("*/");
                }
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine(Warning);
            sb.AppendLine();

            IEnumerable<string> systemNamespaces = Formatter.GetNamespaces().Where(n => n.StartsWith("System")).ToList();
            foreach (string ns in Formatter.GetNamespaces().Where(n => n.StartsWith("System")))
            {
                sb.AppendFormat("using {0};\n", ns);
            }
            if (systemNamespaces.Any())
            {
                sb.AppendLine();
            }

            foreach (string ns in Formatter.GetNamespaces().Except(systemNamespaces))
            {
                sb.AppendFormat("using {0};\n", ns);
            }
            sb.AppendLine();

            Output.GetStringBuilder().Insert(0, sb.ToString());
        }

        public DocumentGenerator Async(ContractDefinition definition = null, ClassDescriptor contractDescriptor = null, bool force = false)
        {
            return AddContractGenerator(new InterfaceGenerator(Output, Formatter, IntendProvider)
            {
                ContractDefinition = definition ?? ContractDefinition,
                ContractDescriptor = contractDescriptor,
                ForceAsync = force
            });
        }

        public DocumentGenerator Descriptor(ContractDefinition definition = null, ClassDescriptor descriptor = null)
        {
            return
                AddContractGenerator(
                    new ContractDescriptorGenerator(Output, Formatter, IntendProvider)
                        {
                            ContractDefinition = definition ?? ContractDefinition,
                            ContractDescriptor = descriptor
                        });
        }

        public DocumentGenerator Contract(ContractDefinition definition = null, ClassDescriptor descriptor = null)
        {
            return
                AddContractGenerator(
                    new ContractGenerator(Output, Formatter, IntendProvider)
                        {
                            ContractDefinition = definition ?? ContractDefinition,
                            ContractDescriptor = descriptor
                        });
        }

        public DocumentGenerator Server(ContractDefinition definition = null, ClassDescriptor descriptor = null)
        {
            return
                AddContractGenerator(
                    new ContractActionsGenerator(Output, Formatter, IntendProvider)
                        {
                            ContractDefinition = definition ?? ContractDefinition,
                            ContractDescriptor = descriptor
                        });
        }

        public DocumentGenerator Client(ContractDefinition definition = null, ClassDescriptor descriptor = null, bool forceAsync = false)
        {
            return AddContractGenerator(new ClientGenerator(Output, Formatter, IntendProvider)
            {
                ContractDefinition = definition ?? ContractDefinition,
                ContractDescriptor = descriptor,
                ForceAsync = forceAsync
            });
        }

        public void Add(GeneratorBase generator)
        {
            var generatorBase = generator as ContractGeneratorBase;
            if (generatorBase != null)
            {
                generatorBase.MetadataProvider = MetadataProvider;
                Formatter.AddNamespace(generatorBase.ContractDefinition.Namespace);
            }

            generator.Output = Output;
            generator.Formatter = Formatter;
            generator.IntendProvider = IntendProvider;

            _contractGenerator.Add(generator);
        }

        private DocumentGenerator AddContractGenerator(ContractGeneratorBase generator)
        {
            Add(generator);
            return this;
        }
    }
}